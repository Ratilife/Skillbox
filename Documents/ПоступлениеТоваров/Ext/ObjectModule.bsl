
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		// Заполнение шапки
		Поставщик = ДанныеЗаполнения.Поставщик;
		Склад = ДанныеЗаполнения.Склад;
		Заказ = ДанныеЗаполнения.Ссылка;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Стоимость = ТекСтрокаТовары.Стоимость;
			НоваяСтрока.ЦенаПоступления = ТекСтрокаТовары.ЦенаПоступления;
			//ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаТовары);   Если реквезитыНазываются одинаково
		КонецЦикла;
	КонецЕсли;
	Автор = ПараметрыСеанса.ТекущийПользователь;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	// регистр Хозяйственный 
	Движения.Хозяйственный.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.Хозяйственный.Добавить();
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		Движение.Период = Дата;
		Движение.Сумма = ТекСтрокаТовары.Стоимость;
		Движение.Количество = ТекСтрокаТовары.Количество;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = ТекСтрокаТовары.Номенклатура;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Склад] = Склад;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Поставщик;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Договор] = Договор;
	КонецЦикла;

	// регистр Хозяйственный 
	Движения.Хозяйственный.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.Хозяйственный.Добавить();
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
		Движение.Период = Дата;
		Движение.Сумма = СуммаДокумента;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Поставщик;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Договор] = Договор;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Поставщик;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Договор] = Договор;
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	
	// регистр ЦеныПоступления
	Движения.ЦеныПоступления.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ЦеныПоступления.Добавить();
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Поставщик = Поставщик;
		Движение.ЦенаПоступления = ТекСтрокаТовары.ЦенаПоступления;
	КонецЦикла;

	
	
	// регистр ОбъемыЗакупок 
	Движения.Закупки.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		
			Движение = Движения.Закупки.Добавить();
			Движение.Период = Дата;
			Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
			Движение.Склады = Склад;
			Движение.Стоимость = ТекСтрокаТовары.Стоимость;
			Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

	#Область коментарий
	// Так не надо
	//Движения.ОстаткиНаСкладе.Записывать = Истина;
	//Для Каждого ТекСтрокаТовары Из Товары Цикл
	//	Если  (ТекСтрокаТовары.Номенклатура.ВидНоменклатуры = Справочники.ВибыНоменклатура.Товар) ИЛИ (ТекСтрокаТовары.Номенклатура.ВидНоменклатуры = Справочники.ВибыНоменклатура.ПустаяСсылка()) Тогда
	//		Движение = Движения.ОстаткиНаСкладе.Добавить();
	//		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	//		Движение.Период = Дата;
	//		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
	//		Если Склад = Справочники.Склады.ПустаяСсылка() Тогда
	//			Движение.Склады  =Константы.СкладПоУмолчанию.Получить() ;
	//			Склады =Константы.СкладПоУмолчанию.Получить();  
	//			ЭтотОбъект.Записать();
	//		Иначе	
	//			Движение.Склады = Склад;
	//		КонецЕсли;	
	//		Если ТекСтрокаТовары.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
	//			Движение.Характеристика = Константы.ОстаткиПоХарактеристики.Получить();
	//			ТекСтрокаТовары.Характеристика =  Константы.ОстаткиПоХарактеристики.Получить();
	//			ЭтотОбъект.Записать();
	//		Иначе
	//			Движение.Характеристика = ТекСтрокаТовары.Характеристика;
	//		КонецЕсли;	
	//		Движение.Количество = ТекСтрокаТовары.Количество;
	//	КонецЕсли;
	//КонецЦикла;
	#КонецОбласти
	Движения.ОстаткиНаСкладе.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Если  (ТекСтрокаТовары.Номенклатура.ВидНоменклатуры = Справочники.ВибыНоменклатура.Товар) ИЛИ (ТекСтрокаТовары.Номенклатура.ВидНоменклатуры = Справочники.ВибыНоменклатура.ПустаяСсылка()) Тогда
			Движение = Движения.ОстаткиНаСкладе.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
			
			Движение.Склады = Склад;
			Движение.Характеристика = ТекСтрокаТовары.Характеристика;
				
			Движение.Количество = ТекСтрокаТовары.Количество;
		КонецЕсли;
	КонецЦикла;

	
	
	// регистр ОстаткиТоваров Приход
	Движения.ОстаткиТоваров.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Количество = ТекСтрокаТовары.Количество;
		Движение.Сумма = ТекСтрокаТовары.Стоимость;
	КонецЦикла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	СуммаДокумента = Товары.Итог("Стоимость");
	Если Склад.Пустая() Тогда
		 Склад = Константы.СкладПоУмолчанию.Получить();
	КонецЕсли;
	 
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Если Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
			Отказ =Истина;	
		КонецЕсли;	
	КонецЕсли;
	
	
	// Обмен данными
	Если ОбменДанными.Загрузка Тогда	
	    Возврат;
	КонецЕсли; 
	ТекОрганизация=Организация;
	УзлыПоОрганизации= ОбменДаннымиСервер.ПолучитьУзелОрганизации(ТекОрганизация);
	Если УзлыПоОрганизации.Количество()>0 Тогда
		Для каждого УзелОбмена Из УзлыПоОрганизации Цикл
			ОбменДанными.Получатели.Добавить(УзелОбмена.Значение);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	Префикс = Организация.Префикс + ТорговаяТочка.Префикс; 
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если Поставщик.Признак = Перечисления.ПризнакКлиента.ЧастноеЛицо Тогда
		ПорядковыйНомер = ПроверяемыеРеквизиты.Найти("Договор");
		Если ПорядковыйНомер <> Неопределено Тогда
			 ПроверяемыеРеквизиты.Удалить(ПорядковыйНомер);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	 Движения.ИтогиПоДокументам.Записывать = Истина;
	 Движение = Движения.ИтогиПоДокументам.Добавить();
	 Движение.Период = Дата;
	 Движение.Сумма = Товары.Итог("Стоимость");
	 Движение.Контрагент = Поставщик;
	 Движение.Автор = ПараметрыСеанса.ТекущийПользователь;
	 Движения.ИтогиПоДокументам.Записать();
КонецПроцедуры

Процедура ПроведениеВМодуле() Экспорт
	
	Сообщить("Работает");
	
КонецПроцедуры	




	
	