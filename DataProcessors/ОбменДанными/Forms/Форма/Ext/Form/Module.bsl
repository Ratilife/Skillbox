
&НаКлиенте
Процедура СоздатьНачальныеОбразы(Команда)
	СоздатьНачальныеОбразыНаСеревер();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьНаборы(ИмяДокумента, Объект, Узел, Состав)

	Для каждого Регистр Из Метаданные.Документы[ИмяДокумента].Движения Цикл
	
		Если Состав.Содержит(Регистр) Тогда
			Если Метаданные.РегистрыБухгалтерии.Содержит(Регистр) Тогда
				Набор = РегистрыБухгалтерии[Регистр.Имя].СоздатьНаборЗаписей();
			ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Регистр) Тогда
				Набор = РегистрыНакопления[Регистр.Имя].СоздатьНаборЗаписей();
			ИначеЕсли Метаданные.РегистрыРасчета.Содержит(Регистр) Тогда
				Набор = РегистрыРасчета[Регистр.Имя].СоздатьНаборЗаписей();
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(Регистр) Тогда
				Набор = РегистрыСведений[Регистр.Имя].СоздатьНаборЗаписей();
			КонецЕсли;
			Набор.Отбор.Регистратор.Установить(Объект);
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Набор);
		КонецЕсли; 
	
	КонецЦикла; 
	

КонецПроцедуры // ЗарегистрироватьНаборы(ИмяДокумента, Объект, Узел)()
 

&НаСервереБезКонтекста
Процедура СоздатьНачальныеОбразыНаСеревер()

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УниверсальныйОбмен.Ссылка,
	               |	УниверсальныйОбмен.Организация
	               |ИЗ
	               |	ПланОбмена.УниверсальныйОбмен КАК УниверсальныйОбмен
	               |ГДЕ
	               |	УниверсальныйОбмен.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Состав = Выборка.Ссылка.Метаданные().Состав;
		Для каждого ОбъектПлана Из Состав Цикл
		
			Объект = ОбъектПлана.Метаданные;
			Если Метаданные.Документы.Содержит(Объект) Тогда
				Если Метаданные.Документы[Объект.Имя].Реквизиты.Найти("Организация")<>Неопределено Тогда
					Запрос.Текст = "ВЫБРАТЬ
					               |	"+Объект.Имя+".Ссылка
					               |ИЗ
					               |	Документ."+Объект.Имя+" КАК "+Объект.Имя+"
					               |ГДЕ
					               |	"+Объект.Имя+".Организация = &Организация";
					//Запрос.Текст = "ВЫБРАТЬ
					//               |	ПоступлениеТоваровИУслуг.Ссылка
					//               |ИЗ
					//               |	Документ.ПоступлениеТоваровИУслуг КАК ПоступлениеТоваровИУслуг
					//               |ГДЕ
					//               |	ПоступлениеТоваровИУслуг.Организация = &Организация";
					//Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровИУслуг", Объект.Имя);
					Запрос.УстановитьПараметр("Организация", Выборка.Организация);
					ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
					Пока ВыборкаОбъектов.Следующий() Цикл
						ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, ВыборкаОбъектов.Ссылка);
						ЗарегистрироватьНаборы(Объект.Имя, ВыборкаОбъектов.Ссылка, Выборка.Ссылка, Состав);
					КонецЦикла;
					
				Иначе
					ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Объект);
					Запрос.Текст = "ВЫБРАТЬ
					               |	ПоступлениеТоваровИУслуг.Ссылка
					               |ИЗ
					               |	Документ.ПоступлениеТоваровИУслуг КАК ПоступлениеТоваровИУслуг";
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровИУслуг", Объект.Имя);
					ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
					Пока ВыборкаОбъектов.Следующий() Цикл
						ЗарегистрироватьНаборы(Объект.Имя, ВыборкаОбъектов.Ссылка, Выборка.Ссылка, Состав);
					КонецЦикла;
				КонецЕсли; 
			ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Объект) Тогда
				
			Иначе
				ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Объект);
			КонецЕсли; 
			
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры // СоздатьНачальныеОбразыНаСеревер()


&НаКлиенте
Процедура УдалитьРегистрацию(Команда)
	УдалитьРегистрациюНаСервере();
КонецПроцедуры


 
&НаСервереБезКонтекста
Процедура УдалитьРегистрациюНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УниверсальныйОбмен.Ссылка
		|ИЗ
		|	ПланОбмена.УниверсальныйОбмен КАК УниверсальныйОбмен
		|ГДЕ
		|	УниверсальныйОбмен.Ссылка <> &ТекущийУзел";

	Запрос.УстановитьПараметр("ТекущийУзел", ПланыОбмена.УниверсальныйОбмен.ЭтотУзел());
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	МассивФилиалов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивФилиалов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);	
		ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаДетальныеЗаписи.Ссылка);	
	КонецЦикла;
		//ПланыОбмена.УдалитьРегистрациюИзменений(МассивФилиалов);	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РИБ.Ссылка
		|ИЗ
		|	ПланОбмена.РИБ КАК РИБ
		|ГДЕ
		|	РИБ.Ссылка <> &ТекущийУзел";

	Запрос.УстановитьПараметр("ТекущийУзел", ПланыОбмена.РИБ.ЭтотУзел());
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	МассивФилиалов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивФилиалов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);	
		ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаДетальныеЗаписи.Ссылка);	
	КонецЦикла;

КонецПроцедуры // УдалитьРегистрациюНаСервере()


&НаКлиенте
Процедура Выгрузка(Команда)
	ВыгрузкаНаСервере(Узел);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыгрузкаНаСервере(Узел)

	Запись = Новый ЗаписьXML;
	// Открываем файл
	// ПланыОбмена.УниверсальныйОбмен.ЭтотУзел() - предопределенный элемент
	ПутьКФайлу= "K:\Temp\Message-From-"+ПланыОбмена.УниверсальныйОбмен.ЭтотУзел().Код+"-To-"+Узел.Код+".xml";
	Запись.ОткрытьФайл(ПутьКФайлу);
	Запись.ЗаписатьОбъявлениеXML();
	// создать запись сообщения - сообщению присваивается номер
	ОбменСообщение =ПланыОбмена.СоздатьЗаписьСообщения();
	// возвращает тип данных ЗаписьСообщенияОбмена. 
// начинаем запись - добавляется запись о том, что выполняется запись определенного сообщения для узлов.
	ОбменСообщение.НачатьЗапись(Запись, Узел);
// выбираем все зарегистрированные изменения	
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, ОбменСообщение.НомерСообщения);
	Пока Выборка.Следующий() Цикл
	
		Объект = Выборка.Получить();
		Если Метаданные.РегистрыНакопления.Содержит(Объект.Метаданные()) Тогда
			Регистратор = Объект.Отбор.Регистратор.Значение;
			Если Регистратор.Метаданные().Реквизиты.Найти("Организация") <> Неопределено
			И Регистратор.Организация <> Узел.Организация Тогда
				Объект.Очистить();
			КонецЕсли;
			ЗаписатьXML(Запись, Объект);
		Иначе
			ЗаписатьXML(Запись, Объект);
		КонецЕсли; 
	
	КонецЦикла; 
	
	ОбменСообщение.ЗакончитьЗапись();
	Запись.Закрыть();

КонецПроцедуры // ВыгрузкаНаСервере(Узел)()

&НаКлиенте
Процедура Загрузка(Команда)
	ЗагрузкаНаСервере(Узел,ПутьКФайлу);
КонецПроцедуры
 
 
&НаСервереБезКонтекста
Процедура ЗагрузкаНаСервере(Узел,ПутьКФайлу)

	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(СокрЛП(ПутьКФайлу));
// создает номер прочитанного сообщения, читает заголовок сообщения и устанавливает блокировку на узел	
	ЧтениеСообщение = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщение.НачатьЧтение(Чтение); // присваивается номер, заполняются отправитель и получатели
	 ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	Пока ВозможностьЧтенияXML(Чтение) Цикл
	
		Объект = ПрочитатьXML(Чтение);
		Если ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщение.Отправитель, Объект) 
		И ПланыОбмена.УниверсальныйОбмен.ЭтотУзел().Организация = ПустаяОрганизация Тогда
		// исключение коллизий
			Сообщить("Коллизия разрешена в пользу текущего узла");
		Иначе
			//указываем, что в качестве отправителя выступает определнный узел 
			//система не будет регистрировать изменения для данного узла
			Объект.ОбменДанными.Отправитель = ЧтениеСообщение.Отправитель;
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		КонецЕсли;
	
	КонецЦикла;
	// собщение о том, что данные загружены
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщение.Отправитель, ЧтениеСообщение.НомерПринятого);
	
	ЧтениеСообщение.ЗакончитьЧтение();
	Чтение.Закрыть();

КонецПроцедуры // ЗагрузкаНаСервере()

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Фильтр    = "Текст (*.xml)|*.xml";
	ЗаголовокДиалога = "Выберите файл";
	ПутьКФайлу=РаботаСФайламиКлиент.ВыборФайловИКаталогов("Файл",Фильтр,ЗаголовокДиалога);
КонецПроцедуры
