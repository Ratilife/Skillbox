
&НаКлиенте
Процедура ОтображениеФайловКаталога(Команда)
	ОтобразитьФайлы(КаталогЗагрузки);
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьФайлы(Каталог)
	ТаблицаФайлов.Очистить();
	МассивФайлов = НайтиФайлы(СокрЛП(Каталог),"*.*");
	Если МассивФайлов.Количество()>0 Тогда
		
		Для каждого ФайлИзМассива Из МассивФайлов Цикл
			
			СтрокаФайла = ТаблицаФайлов.Добавить();
			СтрокаФайла.Имя = ФайлИзМассива.Имя;
			СтрокаФайла.ПолноеИмя = ФайлИзМассива.ПолноеИмя;
			СтрокаФайла.Путь = ФайлИзМассива.Путь;
			СтрокаФайла.Тип = ФайлИзМассива.Расширение;
			СтрокаФайла.ЭтоКаталог =ФайлИзМассива.ЭтоКаталог();						 
		КонецЦикла;
		
	КонецЕсли; 
	
	
КонецПроцедуры // ОтобразитьФайлы()

&НаКлиенте
Процедура КаталогЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Фильтр="Все файлы(*.*)|*.*";	
	ЗаголовокДиалога ="Выберите путь для отображения файлов";
	ТекКаталог = КаталогЗагрузки;
	КаталогЗагрузки=РаботаСФайламиКлиент.ВыборФайловИКаталогов("Каталог",Фильтр,ЗаголовокДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ТД = Элементы.ТаблицаФайлов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.Имя) И Не ТД.ЭтоКаталог Тогда
		ЗапуститьПриложение(СокрЛП(ТД.ПолноеИмя)  );
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ТД = Элементы.ТаблицаФайлов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.Имя) И Не ТД.ЭтоКаталог Тогда
		ЗапуститьПриложение(СокрЛП(ТД.ПолноеИмя)  );
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Фильтр    = "Текст (*.csv)|*.csv|Текст (*.txt)|*.txt";
	ЗаголовокДиалога = "Выберите файл";
	ПутьКФайлу=РаботаСФайламиКлиент.ВыборФайловИКаталогов("Файл",Фильтр,ЗаголовокДиалога,КаталогЗагрузки);
	//Текст.Прочитать(ПутьКФайлу);
КонецПроцедуры


&НаКлиенте
Процедура СлужебныеКаталоги(Команда)
	Сообщить(КаталогПрограммы());
	Сообщить(КаталогВременныхФайлов());
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьКонтрагентов(Команда)
	ВыгрузитьXML();	
КонецПроцедуры
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьТаблицуКонтрагентов()
	ТаблицаКонтрагентов.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Наименование,
	|	Контрагенты.Код,
	|	Контрагенты.ЭтоГруппа КАК ЭтоГруппа,
	|	Контрагенты.Признак,
	|	Контрагенты.Предопределенный,
	|	Контрагенты.ИмяПредопределенныхДанных,
	|	Контрагенты.Ссылка,
	|	Контрагенты.Родитель.Наименование КАК Родитель,
	|	Контрагенты.Родитель.Код
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа УБЫВ,
	|	Родитель";
	
	ТаблицаКонтрагентов.Загрузить(Запрос.Выполнить().Выгрузить());
	
	
	
КонецПроцедуры // ЗаполнитьТаблицуКонтрагентов()
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция НайтиРодителя(Наименование)
	
	НайденыйРодитель = Справочники.Контрагенты.ПустаяСсылка();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|	И Контрагенты.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденыйРодитель =ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	
	Возврат НайденыйРодитель;
	
КонецФункции // НайтиРодителя()


&НаКлиенте
Процедура ЗагрузитьКонтрагентов(Команда)
	ЗагрузитьXML();
	ОбработатьЗагруженныеДанные();
КонецПроцедуры
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ОбработатьЗагруженныеДанные()
	ПризнакОрганизация=Перечисления.ПризнакКлиента.Организация;
	
	ПризнакЧО=Перечисления.ПризнакКлиента.ЧастноеЛицо;
	ПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
	Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
			НайденыйРодительСсылка=НайтиРодителя(СтрокаТаблицы.Родитель);
			Если НайденыйРодительСсылка =ПустаяСсылка Тогда
				
				
				НайденыйРодитель = Справочники.Контрагенты.СоздатьГруппу();
				НайденыйРодитель.Код=СтрокаТаблицы.РодительКод;
				НайденыйРодитель.Наименование=СтрокаТаблицы.Родитель;
				Если ЗагружатьСсылкуКонтрагента Тогда
					
					НайденыйРодитель.УстановитьСсылкуНового( Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.ИД)));
					
					
				КонецЕсли; 				
				
				НайденыйРодитель.Записать();
				НайденыйРодительСсылка = НайденыйРодитель.Ссылка; 
				
			КонецЕсли; 
			
		Иначе
			НайденыйРодительСсылка =  ПустаяСсылка;
		КонецЕсли; 
		Если СтрокаТаблицы.ЭтоГруппа Тогда
			
			НовыйЭлемент = Справочники.Контрагенты.СоздатьГруппу();
			НовыйЭлемент.Код=СтрокаТаблицы.Код;
			НовыйЭлемент.Наименование=СтрокаТаблицы.Наименование;
			НовыйЭлемент.Родитель=НайденыйРодительСсылка;
		Иначе
			НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
			НовыйЭлемент.Код=СтрокаТаблицы.Код;
			НовыйЭлемент.Наименование=СтрокаТаблицы.Наименование;
			Если СтрокаТаблицы.Признак= "Организация" Тогда
				
				НовыйЭлемент.Признак=ПризнакОрганизация;
				
			Иначе
				НовыйЭлемент.Признак=ПризнакЧО;
				
			КонецЕсли; 
			НовыйЭлемент.Родитель=НайденыйРодительСсылка;
			Если ЗагружатьСсылкуКонтрагента Тогда
				
				НовыйЭлемент.УстановитьСсылкуНового( Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.ИД)));
				
				
			КонецЕсли; 				
			
			
		КонецЕсли; 
		Попытка
			
			НовыйЭлемент.Записать();
			
			
		Исключение
			
		КонецПопытки;
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьЗагруженныеДанные()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ЗагрузитьXML()
	
	ТаблицаКонтрагентов.Очистить();
	Фильтр="(*.xml)|*.xml";	
	ЗаголовокДиалога = "Выберите файл";
	
	ФайлДляЗагрузки =РаботаСФайламиКлиент.ВыборФайловИКаталогов("Файл",Фильтр,ЗаголовокДиалога,КаталогЗагрузки);
	Файл = Новый ЧтениеXML;
	Файл.ОткрытьФайл(ФайлДляЗагрузки);
	Пока Файл.Прочитать() Цикл
		Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Файл.Имя <> "Контрагент" Тогда
				Продолжить;
			КонецЕсли; 
			Код = "";
			Ссылка = "";
			Наименование = "";
			Признак = "";
			ЭтоГруппа = 0;
			Родитель = "";
			РодительКод = "";
			Пока Файл.ПрочитатьАтрибут() Цикл
				Если Файл.Имя = "Код" Тогда
					Код = Файл.Значение;
				ИначеЕсли Файл.Имя = "Признак" Тогда
					Признак = Файл.Значение ;
				ИначеЕсли Файл.Имя = "Ссылка" Тогда
					Ссылка = Файл.Значение ;
				ИначеЕсли Файл.Имя = "Родитель" Тогда
					Родитель = Файл.Значение ;
				ИначеЕсли Файл.Имя = "РодительКод" Тогда
					РодительКод = Файл.Значение ;
				ИначеЕсли Файл.Имя = "ЭтоГруппа" Тогда
					ЭтоГруппа = ?(Файл.Значение="0",Ложь,Истина) ;
				КонецЕсли; 
			КонецЦикла;
			Файл.Прочитать();
			Наименование = Файл.Значение ;
			СтрокаТаблицы=ТаблицаКонтрагентов.Добавить();
			СтрокаТаблицы.Код=Код;
			СтрокаТаблицы.Наименование=Наименование;
			СтрокаТаблицы.Признак=Признак;
			СтрокаТаблицы.ЭтоГруппа=ЭтоГруппа;
			СтрокаТаблицы.Родитель=Родитель;
			СтрокаТаблицы.РодительКод=РодительКод;
			СтрокаТаблицы.ИД=Ссылка;
		КонецЕсли; 
	КонецЦикла;
	Файл.Закрыть();
	
	
КонецПроцедуры // ЗагрузитьXML()

&НаСервере
Процедура ВыгрузитьКонтрагентовВТабличныйДокументНаСервере()
	
	Макет = Обработки.РаботаСФайлами.ПолучитьМакет("Макет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Код,
	|	Контрагенты.Наименование,
	|	Контрагенты.Признак,
	|	Контрагенты.ЭтоГруппа,
	|	Контрагенты.Менеджер,
	|	ПРЕДСТАВЛЕНИЕ(Контрагенты.Менеджер),
	|	Контрагенты.Пол,
	|	Контрагенты.Обращение,
	|	Контрагенты.Примечание
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьКонтрагентовВТабличныйДокумент(Команда)
	ВыгрузитьКонтрагентовВТабличныйДокументНаСервере();
	ТабДок.Записать(КаталогЗагрузки+"\"+"Контрагенты.pdf", ТипФайлаТабличногоДокумента.PDF );	
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьВФайлыРазличныхТипов(Команда)
	
	Если ВидФайлаВыгрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.Excel")  Тогда
		ВыгрузитьExcel();
	ИначеЕсли ВидФайлаВыгрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.DBF")  Тогда
		ВыгрузитьDBF();
	ИначеЕсли ВидФайлаВыгрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.TXT")  Тогда
		ВыгрузитьTXT();
	ИначеЕсли ВидФайлаВыгрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.XML")  Тогда
		ВыгрузитьXML();
		
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьDBF()
	#Если Не ВебКлиент Тогда
		ЗаполнитьТаблицуКонтрагентов();
		
		XBase  = Новый XBase;
		XBase.Поля.Добавить("KOD","S",9,0);
		XBase.Поля.Добавить("NAIM","S",25,0);
		XBase.Поля.Добавить("PRIZ","S",15,0);
		XBase.Поля.Добавить("GRUPPA","N",1,0);
		Если КодировкаВыгрузки="ANSI" Тогда
			ТекКодировка = КодировкаXBase.ANSI;
		Иначе
			ТекКодировка  = КодировкаXBase.OEM;
			
		КонецЕсли; 
		ИмяФайла=КаталогЗагрузки+"\"+"Cust" ;
		XBase.Кодировка = ТекКодировка;
		XBase.СоздатьФайл(ИмяФайла);
		XBase.АвтоСохранение = Истина;
		Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
			XBase.Добавить();
			XBase.УстановитьЗначениеПоля("KOD",СтрокаТаблицы.Код);
			XBase.УстановитьЗначениеПоля("NAIM",СтрокаТаблицы.Наименование);
			XBase.УстановитьЗначениеПоля("PRIZ",СокрЛП(СтрокаТаблицы.Признак));
			XBase.УстановитьЗначениеПоля("GRUPPA",?(СтрокаТаблицы.ЭтоГруппа,1,0));
			
			
		КонецЦикла; 
		
		XBase.ЗакрытьФайл();
		ОбщееНазначение.СообщитьПользователю(СокрЛП(ИмяФайла) +" Выгрузка завершена.");
	#Иначе
		Сообщить("Данная функция недоступна в ВебКлиенте");
	#КонецЕсли
КонецПроцедуры // ЗагрузитьНаСервере()
&НаКлиенте
Процедура ВыгрузитьExcel()
	ЗаполнитьТаблицуКонтрагентов();
	
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		ExcelКнига =Excel.Application.WorkBooks.Add();
		ИмяФайла=КаталогЗагрузки+"\"+"Контрагенты" ;
		ExcelЛист = ExcelКнига.WorkSheets(1);
	Исключение
		ОбщееНазначение.СообщитьПользователю("Ошибка. Возможно не установлен Excel.");
		Возврат;
		
	КонецПопытки;
	
	
	
	Ячейка = ExcelЛист.Cells(1,1);
	Ячейка.Value = "Код";
	Ячейка = ExcelЛист.Cells(1,2);
	Ячейка.Value = "Наименование";
	Ячейка = ExcelЛист.Cells(1,3);
	Ячейка.Value = "Признак";
	Ячейка = ExcelЛист.Cells(1,4);
	Ячейка.Value = "ЭтоГруппа";
	Сч = 1;
	Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		Сч = Сч + 1;
		
		Ячейка = ExcelЛист.Cells(Сч,1);
		Ячейка.NumberFormat = "@";
		Ячейка.Value = СтрокаТаблицы.Код;
		Ячейка = ExcelЛист.Cells(Сч,2);
		Ячейка.Value = СтрокаТаблицы.Наименование;
		Ячейка = ExcelЛист.Cells(Сч,3);
		Ячейка.Value = СтрокаТаблицы.Признак;
		Ячейка = ExcelЛист.Cells(Сч,4);
		Ячейка.Value = СтрокаТаблицы.ЭтоГруппа;
		
	КонецЦикла; 
	ExcelКнига.SaveAs(ИмяФайла);
	//не показывать на экран сохраненный файл
	Excel.UserControl = 0 ;
	// чтобы не задавались вопросы при закрытии и сохранениии
	Excel.DisplayAlerts = 0;
	// выйти из приложения
	Excel.Application.Quit();
	Excel = 0;
	
	ОбщееНазначение.СообщитьПользователю(СокрЛП(ИмяФайла) +" Выгрузка завершена.");
	
КонецПроцедуры // ЗагрузитьНаСервере()

&НаКлиенте
Процедура ВыгрузитьTXT()
	ЗаполнитьТаблицуКонтрагентов();
	Если ТаблицаКонтрагентов.Количество()>0 Тогда
		ТекКодировка = КодировкаТекста.ANSI;
		ИмяФайла=КаталогЗагрузки+"\"+"Контрагенты.txt" ;
		Текст = Новый ТекстовыйДокумент;
		Если Не ЗначениеЗаполнено(Разделитель) Тогда
			
			Разделитель = ",";
			
		КонецЕсли; 
		Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
			СтрокаФ = "";
			Код=СокрЛП(СтрокаТаблицы.Код);
			Наименование=СокрЛП(СтрокаТаблицы.Наименование);  
			Признак=СокрЛП(СтрокаТаблицы.Признак);  
			ЭтоГруппа=СтрокаТаблицы.ЭтоГруппа;  
			СтрокаФ =  Код+Разделитель+Наименование+Разделитель+Признак+Разделитель+ЭтоГруппа;
			Текст.ДобавитьСтроку(СтрокаФ);
		КонецЦикла;
		
		Попытка
			Текст.Записать(ИмяФайла,ТекКодировка);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		ОбщееНазначение.СообщитьПользователю(СокрЛП(ИмяФайла) +" Выгрузка завершена.");
		
	КонецЕсли; 
	
КонецПроцедуры // ()
&НаКлиенте
Процедура ВыгрузитьXML()
	
	ЗаполнитьТаблицуКонтрагентов();
	Файл = Новый ЗаписьXML;
	Файл.ОткрытьФайл(КаталогЗагрузки+"\"+"Контрагенты.xml" );
	Файл.ЗаписатьОбъявлениеXML();
	Файл.ЗаписатьНачалоЭлемента("Root");
	Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		Файл.ЗаписатьНачалоЭлемента("Контрагент");
		Файл.ЗаписатьАтрибут("Код", СтрокаТаблицы.Код);		
		Файл.ЗаписатьАтрибут("ЭтоГруппа", ?(СтрокаТаблицы.ЭтоГруппа,"1","0"));		
		Файл.ЗаписатьАтрибут("Признак", Строка(СтрокаТаблицы.Признак));		
		Файл.ЗаписатьАтрибут("Ссылка", Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор()));		
		Файл.ЗаписатьАтрибут("Родитель", Строка(СтрокаТаблицы.Родитель));		
		Файл.ЗаписатьТекст(СтрокаТаблицы.Наименование);
		Файл.ЗаписатьКонецЭлемента();
	КонецЦикла; 
	
	
	Файл.ЗаписатьКонецЭлемента();
	Файл.Закрыть();
	
	
КонецПроцедуры // ВыгрузитьXML()

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	Если ВидФайлаЗагрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.Excel")  Тогда
		ЗагрузитьExcel();
	ИначеЕсли ВидФайлаЗагрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.DBF")  Тогда
		ЗагрузитьDBF();
	ИначеЕсли ВидФайлаЗагрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.TXT")  Тогда
		ЗагрузитьTXT();
	ИначеЕсли ВидФайлаЗагрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.XML")  Тогда
		ЗагрузитьXML();
		
		
	КонецЕсли; 
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьExcel()
	ТаблицаКонтрагентов.Очистить();
	
	Если Не ЗначениеЗаполнено(НомерКолонкиКод) Тогда
		НомерКолонкиКод = 1;
		
		
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(НомерКолонкиНаименование) Тогда
		НомерКолонкиНаименование = 2;
		
		
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(НомерКолонкиПризнак) Тогда
		НомерКолонкиПризнак = 3;
		
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НомерКолонкиЭтоГруппа) Тогда
		НомерКолонкиЭтоГруппа = 4;
		
		
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		ExcelКнига =Excel.Application.WorkBooks.Open(ИмяФайла);
		ExcelЛист = ExcelКнига.WorkSheets(1);
	Исключение
		ОбщееНазначение.СообщитьПользователю("Ошибка. Возможно не установлен Excel.");
		Возврат;
	КонецПопытки;
	Строк = ExcelЛист.Cells.CurrentRegion.Rows.Count;
	Столбцов = ExcelЛист.Cells.CurrentRegion.Columns.Count;   
	КоличествоПрочитанныхСтрок=0;
	СчетчикСтрокДляОбработки=0;
	
	Если Строк>0 Тогда
		Прогресс= КоличествоПрочитанныхСтрок*100/Строк;
		ТекстСостояния = "Загружено " + Строка(КоличествоПрочитанныхСтрок) + " строк";
		
		ТекстОписания = "Из " + Строка(Строк) + " строк";
		
		Состояние(ТекстСостояния,Прогресс,ТекстОписания,БиблиотекаКартинок.ГеографическаяСхема);
		
	КонецЕсли; 
	
	Для Row = 1 По Строк Цикл
		Если Row = 1  Тогда
			Если СодержитСтрокуЗаголовка Тогда
				КоличествоПрочитанныхСтрок=КоличествоПрочитанныхСтрок+1;	
				Продолжить
			КонецЕсли; 
		КонецЕсли; 
		КоличествоПрочитанныхСтрок=КоличествоПрочитанныхСтрок+1;	
		Код = ОбщееНазначение.УбираемПробелы(ExcelЛист.Cells(Row,НомерКолонкиКод).Value);
		Наименование = ExcelЛист.Cells(Row,НомерКолонкиНаименование).Value ;
		Признак = ExcelЛист.Cells(Row,НомерКолонкиПризнак).Value ;
		ЭтоГруппа = ExcelЛист.Cells(Row,НомерКолонкиЭтоГруппа).Value ;
		СчетчикСтрокДляОбработки=СчетчикСтрокДляОбработки+1;
		СтрокаТаблицы=ТаблицаКонтрагентов.Добавить();
		СтрокаТаблицы.Код=Код;
		СтрокаТаблицы.Наименование=Наименование;
		СтрокаТаблицы.Признак=Признак;
		СтрокаТаблицы.ЭтоГруппа=ЭтоГруппа;
		
		//Если СчетчикСтрокДляОбработки = 5 Тогда
		ТекстСостояния = "Загружено " + Строка(КоличествоПрочитанныхСтрок) + " строк";
		ТекстОписания = "Идет обработка "+Строка(КоличествоПрочитанныхСтрок)+ " строки из " + Строка(Строк) + " строк";
		Прогресс= КоличествоПрочитанныхСтрок*100/Строк;
		
		Состояние(ТекстСостояния,Прогресс,ТекстОписания,БиблиотекаКартинок.ГеографическаяСхема);
		//КонецЕсли;
		ОбработкаПрерыванияПользователя() ;
		
	КонецЦикла;
	ТекстСостояния = "Загружено " + Строка(КоличествоПрочитанныхСтрок) + " строк";
	ТекстОписания = "Идет обработка "+Строка(КоличествоПрочитанныхСтрок)+ " строки из " + Строка(Строк) + " строк";
	Прогресс= КоличествоПрочитанныхСтрок*100/Строк;
	
	Состояние(ТекстСостояния,Прогресс,ТекстОписания,БиблиотекаКартинок.ГеографическаяСхема);
	Excel.UserControl = 0 ;
	Excel.DisplayAlerts = 0;
	
	Excel.Application.Quit();
	Excel = 0;
	
	
КонецПроцедуры // ЗагрузитьExcel()
&НаКлиенте
Процедура ЗагрузитьDBF()
	ТаблицаКонтрагентов.Очистить();
	Если Не ЗначениеЗаполнено(НазваниеКолонкиКод) Тогда
		НазваниеКолонкиКод = "KOD";
		
		
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(НазваниеКолонкиНаименование) Тогда
		НазваниеКолонкиНаименование = "NAIM";
		
		
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(НазваниеКолонкиПризнак) Тогда
		НазваниеКолонкиПризнак = "PRIZ";
		
		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НазваниеКолонкиЭтоГруппа) Тогда
		НазваниеКолонкиЭтоГруппа = "GRUPPA";
		
		
	КонецЕсли;
	XBase  = Новый XBase;
	Если КодировкаЗагрузки="ANSI" Тогда
		ТекКодировка = КодировкаXBase.ANSI;
	Иначе
		ТекКодировка  = КодировкаXBase.OEM;
		
	КонецЕсли; 
	
	XBase.Кодировка = ТекКодировка;
	Попытка
		XBase.ОткрытьФайл(ИмяФайла);
	Исключение
		ОбщееНазначение.СообщитьПользователю("Ошибка открытия файла.");
		Возврат;
		
	КонецПопытки;
	Строк = XBase.КоличествоЗаписей();
	КоличествоПрочитанныхСтрок=0;
	Рез = XBase.Первая();
	Пока Не XBase.ВКонце() Цикл
		КоличествоПрочитанныхСтрок=КоличествоПрочитанныхСтрок+1;
		
		Код = ОбщееНазначение.УбираемПробелы(XBase.ПолучитьЗначениеПоля(СокрЛП(НазваниеКолонкиКод)));
		Наименование =XBase.ПолучитьЗначениеПоля(СокрЛП(НазваниеКолонкиНаименование));
		Признак =XBase.ПолучитьЗначениеПоля(СокрЛП(НазваниеКолонкиПризнак));
		ЭтоГруппа =XBase.ПолучитьЗначениеПоля(СокрЛП(НазваниеКолонкиЭтоГруппа));
		
		СтрокаТаблицы=ТаблицаКонтрагентов.Добавить();
		СтрокаТаблицы.Код=Код;
		СтрокаТаблицы.Наименование=Наименование;
		СтрокаТаблицы.Признак=Признак;
		СтрокаТаблицы.ЭтоГруппа=ЭтоГруппа;
		ОбработкаПрерыванияПользователя() ;
		ТекстСостояния = "Загружено " + Строка(КоличествоПрочитанныхСтрок) + " строк";
		ТекстОписания = "Идет обработка "+Строка(КоличествоПрочитанныхСтрок)+ " строки из " + Строка(Строк) + " строк";
		Прогресс= КоличествоПрочитанныхСтрок*100/Строк;
		
		Состояние(ТекстСостояния,Прогресс,ТекстОписания,БиблиотекаКартинок.ГеографическаяСхема);
		
		XBase.Следующая();
	КонецЦикла;
	XBase.ЗакрытьФайл();
	
КонецПроцедуры // ЗагрузитьDBF()
&НаСервере
Функция ПолучитьКодировку(ТекКодировкаВТексте)
	
	ТекКодировка = КодировкаТекста.ANSI;
	Если ТекКодировкаВТексте="ANSI" Тогда
		ТекКодировка = КодировкаТекста.ANSI;
	ИначеЕсли ТекКодировкаВТексте="OEM" Тогда
		ТекКодировка = КодировкаТекста.OEM;
	ИначеЕсли ТекКодировкаВТексте="UTF16" Тогда
		ТекКодировка = КодировкаТекста.UTF16;
	ИначеЕсли ТекКодировкаВТексте="UTF8" Тогда
		ТекКодировка = КодировкаТекста.UTF8;
	ИначеЕсли ТекКодировкаВТексте="Системная" Тогда
		ТекКодировка = КодировкаТекста.Системная;
	КонецЕсли; 
	Возврат  ТекКодировка;
КонецФункции // ПолучитьКодировку()()

&НаКлиенте
Процедура ЗагрузитьTXT()
	ТекстИзФайла = Новый ЧтениеТекста(ИмяФайла, ПолучитьКодировку(СокрЛП(КодировкаЗагрузки)));
	Если Не ЗначениеЗаполнено(РазделительПриЗагрузке) Тогда
		РазделительПриЗагрузке = ";";
		
		
	КонецЕсли; 
	Разделитель=РазделительПриЗагрузке;
	Стр = ТекстИзФайла.ПрочитатьСтроку();
	КоличествоПрочитанныхСтрок=0;
	СчетчикСтрокДляОбработки=0;
	Если СодержитСтрокуЗаголовка Тогда
		Стр = ТекстИзФайла.ПрочитатьСтроку();
	КонецЕсли; 
	Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
		КоличествоПрочитанныхСтрок=КоличествоПрочитанныхСтрок+1;	
		СтрТекущая=	Стр;
		СтрПром =СтрТекущая;
		Поз = 0;
		Поз = Найти(СтрПром,Разделитель);
		Если Поз=0 Тогда
			Сообщить("Отсутствует знак "+Разделитель+" в строке "+КоличествоПрочитанныхСтрок+"! Загрузка не выполнена!"); 
			Стр = Текст.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
		Код = Лев(СтрПром,Поз-1);      
		СтрПром = Прав(СтрПром,СтрДлина(СтрПром)-Поз);
		Поз = Найти(СтрПром,Разделитель);
		Наименование=Лев(СтрПром,Поз-1);     	
		СтрПром = Прав(СтрПром,СтрДлина(СтрПром)-Поз);
		Поз = Найти(СтрПром,Разделитель);
		Признак=Лев(СтрПром,Поз-1);     	
		
		ЭтоГруппа=Прав(СтрПром,СтрДлина(СтрПром)-Поз);     	
		СтрокаТаблицы=ТаблицаКонтрагентов.Добавить();
		СтрокаТаблицы.Код=Код;
		СтрокаТаблицы.Наименование=Наименование;
		СтрокаТаблицы.Признак=Признак;
		СтрокаТаблицы.ЭтоГруппа=ЭтоГруппа;
		ОбработкаПрерыванияПользователя() ;
		//Сообщить(Стр);
		Стр = ТекстИзФайла.ПрочитатьСтроку();
	КонецЦикла; 
	
	
КонецПроцедуры // ЗагрузитьDBF()
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВидФайлаЗагрузки) Тогда
		СтандартнаяОбработка=Ложь;
		Если ВидФайлаЗагрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.DBF") Тогда
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.Заголовок = "Файл  DBF";
			ДиалогВыбораФайла.Фильтр    = "dbf (*.dbf)|*.dbf";
			Если ДиалогВыбораФайла.Выбрать() Тогда
				ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
			КонецЕсли;
		ИначеЕсли ВидФайлаЗагрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.Excel") Тогда
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.Заголовок = "Файл  Excel";
			ДиалогВыбораФайла.Фильтр="Excel (*.xls)|*.xls|Excel (*.xlsx)|*.xlsx";	
			Если ДиалогВыбораФайла.Выбрать() Тогда
				ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
			КонецЕсли;
		ИначеЕсли ВидФайлаЗагрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.XML") Тогда
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.Заголовок = "Файл  XML";
			ДиалогВыбораФайла.Фильтр="XML (*.XML)|*.XML";	
			Если ДиалогВыбораФайла.Выбрать() Тогда
				ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
			КонецЕсли;
		ИначеЕсли ВидФайлаЗагрузки=ПредопределенноеЗначение("Перечисление.ВидыФайлов.TXT") Тогда
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.Заголовок = "Файл  TXT";
			ДиалогВыбораФайла.Фильтр="TXT (*.TXT)|*.TXT";	
			Если ДиалогВыбораФайла.Выбрать() Тогда
				ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Сообщить("Выберите вид файла загрузки");
	КонецЕсли; 
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаДляВывода(ТекКонтрагент)
	
	Возврат ТекКонтрагент.Наименование;
	
КонецФункции // ПолучитьКонтрагентаДляВывода()

&НаСервереБезКонтекста
Функция ПолучитьКодКонтрагентаДляВывода(ТекКонтрагент)
	
	Возврат ТекКонтрагент.Наименование;
	
КонецФункции // ПолучитьКонтрагентаДляВывода()
&НаСервереБезКонтекста
Функция ПолучитьТекущегоПользователя()
	
	Возврат ПараметрыСеанса.ТекущийПользователь.Наименование;
	
КонецФункции // ПолучитьКонтрагентаДляВывода()

&НаКлиенте
Процедура Заявление(Команда)
	Перем СтрГод,СтрДень,СтрМесяц; 
	ПутьШаблона = ИмяШаблона; 
	
	Если ИспользуетсяOpenOffice  Тогда
		Если ЗначениеЗаполнено(ПутьШаблона) Тогда	
			scr = Новый COMОбъект("MSScriptControl.ScriptControl"); 
			scr.language = "javascript";
			scr.eval("Массив=new Array()");
			Массив = scr.eval("Массив");
			scr.AddCode("function SetItem(ind,val){Массив[ind]=val}");
			
			ServiceManager=Новый COMОбъект("com.sun.star.ServiceManager");
			scr.AddObject("ServiceManager",ServiceManager);
			Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");  
			//
			//URL = СтрЗаменить(ПутьШаблона," ","%20");
			//URL = СтрЗаменить(URL,"\","/");
			//
			//URL = "file://localhost/" + URL;
			URL = РаботаСФайламиКлиент.ПреобразоватьВURL(ПутьШаблона);
			Document = Desktop.LoadComponentFromURL(URL, "_blank", 0, Массив);
			MasterFields = Document.getTextFieldMasters();
			Fields = Document.getTextFields();
			Попытка
				fieldMaster = MasterFields.getByName("com.sun.star.text.FieldMaster.User."+"ФИО");
				fieldMaster.Content = СокрЛП(ПолучитьКонтрагентаДляВывода(Контрагент));  
			Исключение
			КонецПопытки;
			Попытка
				fieldMaster = MasterFields.getByName("com.sun.star.text.FieldMaster.User."+"Ответственный");
				fieldMaster.Content = СокрЛП(ПолучитьТекущегоПользователя());  
			Исключение
			КонецПопытки;
			Fields.Refresh();
			ИмяДляСохранения =СтрЗаменить(СокрЛП(ПутьШаблона) ,".ott",ПолучитьКодКонтрагентаДляВывода(Контрагент)+".odt");
			storeUrl = РаботаСФайламиКлиент.ПреобразоватьВURL(ИмяДляСохранения);
			Document.storeAsURL(storeUrl, Массив);	
		Иначе
			ОбщееНазначение.СообщитьПользователю("Не выбран шаблон " );
			
		КонецЕсли;
		
	Иначе
		
		Если Найти(ПутьШаблона,".dotx")>0 Тогда
			ИмяДляСохранения =СтрЗаменить(СокрЛП(ПутьШаблона) ,".dotx",ПолучитьКодКонтрагентаДляВывода(Контрагент));
			
		Иначе	
			ИмяДляСохранения =СтрЗаменить(СокрЛП(ПутьШаблона) ,".dot",ПолучитьКодКонтрагентаДляВывода(Контрагент));
			
		КонецЕсли; 
		Если ЗначениеЗаполнено(ПутьШаблона) Тогда	
			Word = Новый COMОбъект("Word.Application");
			Word.Documents.Add(ПутьШаблона,0);
			Word.Visible = 1; 
			Word.Caption = "Заявление";
			Попытка
				Word.ActiveDocument.FormFields("ФИО").Result = СокрЛП(ПолучитьКонтрагентаДляВывода(Контрагент));
			Исключение
			КонецПопытки;
			Попытка
				Word.ActiveDocument.FormFields("Ответственный").Result =  СокрЛП(ПолучитьТекущегоПользователя()); 
			Исключение
			КонецПопытки;
			
			
			Word.ActiveDocument.Application.Visible = 1;   
			
			Word.ActiveDocument.SaveAs(ИмяДляСохранения);
			//Word.ActiveDocument.PrintOut(1);
		Иначе
			ОбщееНазначение.СообщитьПользователю("Не выбран шаблон " );
			
		КонецЕсли;
	КонецЕсли; 
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяШаблонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ИспользуетсяOpenOffice Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = "Файл  ott";
		ДиалогВыбораФайла.Фильтр="Шаблон (*.ott)|*.ott";	
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ИмяШаблона = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
	Иначе
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = "Файл  dotx";
		ДиалогВыбораФайла.Фильтр    = "Шаблон (*.dotx)|*.dotx";
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ИмяШаблона = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаСервереБезКонтекста
Процедура УдалениеСтрок()
	//    ТаблицаИсполнителей = Объект.Исполнители.Выгрузить();
	//    
	//    СтрокаТаблицыИсполнителей = ТаблицаИсполнителей.Найти(ВнутреннийНомерСтроки,"ВнутреннийНомерСтроки");
	//    Пока СтрокаТаблицыИсполнителей <> Неопределено Цикл
	//   	 ТаблицаИсполнителей.Удалить(СтрокаТаблицыИсполнителей);	
	//   	 СтрокаТаблицыИсполнителей = ТаблицаИсполнителей.Найти(ВнутреннийНомерСтроки,"ВнутреннийНомерСтроки");
	//    КонецЦикла;
	//    Объект.Исполнители.Загрузить(ТаблицаИсполнителей);
	//    Объект.ИзмененыИсполнители=Истина;
	//
	//   
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьТипХранения()
	
	Возврат ТипФайлаТабличногоДокумента.PDF;
	
КонецФункции // ПолучитьТипХранения()

&НаКлиенте
Процедура СохранитьВТабличныйДокеумент(Команда)
	ТипФайла = ТипФайлаТабличногоДокумента.PDF;
	ТабДок.Записать( КаталогЗагрузки+"\"+"КонтрагентыСФормы."+Строка(ТипФайла),ТипФайла);
КонецПроцедуры


&НаКлиенте
Процедура СоздатьКаталогНаш(Команда)
	РаботаСФайламиКлиент.СоздатьПапкуДляВложенныхФайлов(СокрЛП(КаталогЗагрузки),СокрЛП(ИмяКаталога));
КонецПроцедуры


&НаКлиенте
Процедура СкопироватьФайлВПапку(Команда)
	ФайлНаДиске = Новый Файл(ПутьКФайлу);
	Если ФайлНаДиске.Существует() Тогда
		Имя = ФайлНаДиске.Имя;
		//ПереместитьФайл(ПутьКФайлу,СокрЛП(КаталогЗагрузки)+"\"+Имя);
		КопироватьФайл(ПутьКФайлу,СокрЛП(КаталогЗагрузки)+"\"+Имя);
	КонецЕсли; 
КонецПроцедуры


&НаСервереБезКонтекста
Процедура УдалитьконтрагентовНаСервере()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Наименование,
	|	Контрагенты.Код,
	|	Контрагенты.ЭтоГруппа,
	|	Контрагенты.Признак,
	|	Контрагенты.Предопределенный,
	|	Контрагенты.ИмяПредопределенныхДанных,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.Предопределенный";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТекОбъект.Удалить();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры


&НаКлиенте
Процедура Удалитьконтрагентов(Команда)
	УдалитьконтрагентовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыНаДиске(Команда)
	УдалитьФайлы(КаталогЗагрузки,"*.txt");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСодержимоеФайла(Команда)
	Текст.Прочитать(ПутьКФайлу);
	ЭтотОбъект.ТекущийЭлемент  =Элементы.Текст;
КонецПроцедуры

&НаСервере
Процедура ПоискПоGUIDНаСервере()
	ИДКонтрагента = Контрагент.УникальныйИдентификатор();
	СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДКонтрагента));   
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоGUID(Команда)
	ПоискПоGUIDНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСодержимое(Команда)
	Текст.Записать(КаталогЗагрузки+"\НашТекстИзмененный.txt");
КонецПроцедуры

&НаСервере
Процедура ПроверкаПоИДНаСервере()
	СсылкаНаКонтрагента = Справочники.Контрагент.ПолучитьСсылку(Новый УникальныйИдентификатор(GUID));
	Если ЗначениеЗаполнено(СсылкаНаКонтрагента.Код) Тогда
		
		
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПоИД(Команда)
	ПроверкаПоИДНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФорматированныйДокумент(Команда)
	ИмяФайла = КаталогЗагрузки+"\ФорматДокумент."+ТипФайлаФорматированногоДокумента.PDF;
	ФорматДокумент.Записать(ИмяФайла, ТипФайлаФорматированногоДокумента.PDF);
	Сообщить("Файл сохранен" + ИмяФайла);
	ИмяФайла = КаталогЗагрузки+"\ФорматДокумент."+ТипФайлаФорматированногоДокумента.HTML;
	ФорматДокумент.Записать(ИмяФайла, ТипФайлаФорматированногоДокумента.HTML);
	Сообщить("Файл сохранен" + ИмяФайла);
КонецПроцедуры

&НаСервере
Процедура ОбъектыВJSONНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ОбъектОбработка.ОбъектыВJSON();
	Объект.ТекстJSON = ОбъектОбработка.ТекстJSON;
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьJSON(Команда)
	ОбъектыВJSONНаСервере();
	ЭтотОбъект.ТекущийЭлемент = Элементы.ТекстJSON;
КонецПроцедуры

&НаСервере
Процедура JSONВОбъектыНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ОбъектОбработка.JSONВОбъекты();
	ЗначениеВРеквизитФормы(ОбъектОбработка,"Объект");
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьJSON(Команда)
	JSONВОбъектыНаСервере() ;
	
КонецПроцедуры

&НаСервере
Процедура ЗначениеВJSONНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Значение1С = "";
	Объект.ТекстJSON = "";
	Попытка
		Выполнить(ТекстКоманды);
	Исключение
		Сообщить("Не удалось выполнить набор команд"
		+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 
	
	Попытка
		Выполнить(ТекстКоманды);
		Объект.ТекстJSON = ОбъектОбработка.ВыгрузитьВJSON(Значение1С);
	Исключение
		Объект.ТекстJSON = "";
		Сообщить("Не удалось получить JSON-строку для значения:"+СТрока(Значение1С)
		+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеВJSON(Команда)
	ЗначениеВJSONНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ПримерСтруктура(Команда)
	ТекстКоманды ="
	|//Это пример структуры
	|
	|Значение1С = Новый Структура;
	|
	|Значение1С.Вставить(""Текст"",""Пример текста"");
	|Значение1С.Вставить(""Число"",100);
	|Значение1С.Вставить(""Дата"",ТекущаяДата());"
КонецПроцедуры

&НаКлиенте
Процедура ПримерТаблица(Команда)
	
	ТекстКоманды ="
	|//Это пример таблицы
	|
	|Значение1С = Новый ТаблицаЗначений;
	|Значение1С.Колонки.Добавить(""Период"");
	|Значение1С.Колонки.Добавить(""ВидДвижения"");
	|Значение1С.Колонки.Добавить(""Наименование"");
	|Значение1С.Колонки.Добавить(""Количество"");
	|
	|НоваяСтрока = Значение1С.Добавить();
	|НоваяСтрока.Период = ТекущаяДата();
	|НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	|НоваяСтрока.Наименование = ""Покупка товаров"";
	|НоваяСтрока.Количество = 100;
	|
	|НоваяСтрока = Значение1С.Добавить();
	|НоваяСтрока.Период = КонецДня(ТекущаяДата());
	|НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	|НоваяСтрока.Наименование = ""Продажа товаров"";
	|НоваяСтрока.Количество = 150.55;"
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерМассив(Команда)
	
	ТекстКоманды =" 
	|//Это пример массива
	|
	|Значение1С = Новый Массив;
	|
	|Значение1С.Добавить(""Строка массива"");
	|Значение1С.Добавить(100);
	|Значение1С.Добавить(Истина);"
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерСтроки(Команда)
	ТекстКоманды =" 
	|//Это пример строки
	|
	|Значение1С = ""Это строка, которая будет преобразована в JSON""";
КонецПроцедуры
&НаКлиенте
Процедура ПримерЧисло(Команда)
	ТекстКоманды ="
	|//Это пример числа
	|
	|Значение1С = 100";
КонецПроцедуры

&НаКлиенте
Процедура ПереносимыеОбъектыСсылкаНаОбъектПриИзменении(Элемент)
	ТД = Элементы.ПереносимыеОбъекты.ТекущиеДанные;
	ТД.ТипОбъекта =Строка(ТипЗнч(ТД.СсылкаНаОбъект))
КонецПроцедуры

&НаСервере
Процедура СтрокуВЗначениеНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	РезультатПреобразования = "";
	ТекстОшибки = "";
	
	Попытка
		Объект1С = ОбъектОбработка.ЗагрузитьИзJSON(Объект.ТекстJSON);
		Попытка
			ЗначениеВДанныеФормы(Объект1С, РезультатПреобразования); 
			//			РезультатПреобразования = Объект1С;
		Исключение
			Сообщить("Строка преобразована в значение типа """+ТипЗнч(Объект1С)+"""
			|Отображение на клиенте невозможно!");
		КонецПопытки; 
	Исключение
		Сообщить("Не удалось преобразовать строку в значение!"
		+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеИзJSON(Команда)
	СтрокуВЗначениеНаСервере() ;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаJSon(Команда)
	Фильтр    = "Файл данных (*.txt)|*.txt";
	ЗаголовокДиалога = "Выберите файл";
	ПутьКФайлу=РаботаСФайламиКлиент.ВыборФайловИКаталогов("Файл",Фильтр,ЗаголовокДиалога,КаталогЗагрузки);
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(СокрЛП(ПутьКФайлу));
		Объект.ТекстJSON = ТекстовыйДокумент.ПолучитьТекст();
		ПоказатьОповещениеПользователя("Данные загружены",,"Выполнена загрузка данных из файла "+ПутьКФайлу);
	КонецЕсли;  
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьВФайл(Команда)
	Фильтр    = "Файл данных (*.txt)|*.txt";
	ЗаголовокДиалога = "Выберите файл";
	ПутьКФайлу=РаботаСФайламиКлиент.ВыборФайловИКаталогов("Файл",Фильтр,ЗаголовокДиалога,КаталогЗагрузки);
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Объект.ТекстJSON);
		ТекстовыйДокумент.Записать(СокрЛП(ПутьКФайлу));
		ПоказатьОповещениеПользователя("Данные сохранены",,"Выполнено сохранение данных в файл "+ПутьКФайлу);
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВJSONСтандартноНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВJSONСтандартно(Команда)
	тЗапись = Новый ЗаписьJSON;
	тЗапись.ОткрытьФайл(КаталогЗагрузки+"\test.json");
	
	тДанные = Новый Структура;
	тДанные.Вставить("ЧислоJSON", 100);
	тДанные.Вставить("СтрокаJSON", "test");
	тДанные.Вставить("ДатаJSON", Дата(2016, 1, 15));
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO; //"ДатаJSON": "2016-03-15T14:19:48"
	//тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript; "ДатаJSON": "new Date(1452805200000)"
	//тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft; "ДатаJSON": "/Date(1452805200000)/"
	
	//тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата; "ДатаJSON": "2016-01-15T00:00:00"
	//тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением; "ДатаJSON": "2016-01-15T00:00:00+03:00"
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата; //"ДатаJSON": "2016-01-14T21:00:00Z"
	
	ЗаписатьJSON(тЗапись, тДанные, тНастройкиСериализации);
	тЗапись.Закрыть();
	ПоказатьОповещениеПользователя("Данные сохранены",,"Выполнено сохранение данных в файл "+КаталогЗагрузки+"\test.json");
	
КонецПроцедуры

&НаКлиенте
Функция ФункцияПреобразования(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	ПреобразованноеЗначение="";
	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		ПреобразованноеЗначение= Строка(Значение);
	КонецЕсли;
	Возврат ПреобразованноеЗначение;
КонецФункции

&НаКлиенте
Процедура ЗаписатьВJSONПреобразование(Команда)
	тЗапись = Новый ЗаписьJSON;
	тЗапись.ОткрытьФайл(КаталогЗагрузки+"\testPr.json");
	
	
	тДанные = Новый Структура;
	тДанные.Вставить("ЧислоJSON", 100);
	тДанные.Вставить("СтрокаJSON", "test");
	тДанные.Вставить("ДатаJSON", Дата(2016, 1, 15));
	тДанные.Вставить("uidJSON", Новый УникальныйИдентификатор);
	
	ЗаписатьJSON(тЗапись, тДанные, Новый НастройкиСериализацииJSON, "ФункцияПреобразования", ЭтотОбъект);
	тЗапись.Закрыть();
	ПоказатьОповещениеПользователя("Данные сохранены",,"Выполнено сохранение данных в файл "+КаталогЗагрузки+"\testPr.json");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВJSONПоток(Команда)
	тПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", Истина);
	
	тЗапись = Новый ЗаписьJSON;
	
	тЗапись.ПроверятьСтруктуру = Истина;
	тЗапись.ОткрытьФайл(КаталогЗагрузки+"\testStream.json", , , тПараметрыJSON);
	тЗапись.ЗаписатьНачалоОбъекта();
	тЗапись.ЗаписатьИмяСвойства("ЧислоJSON");
	тЗапись.ЗаписатьЗначение(100);
	тЗапись.ЗаписатьИмяСвойства("СтрокаJSON");
	тЗапись.ЗаписатьЗначение("test");
	тЗапись.ЗаписатьИмяСвойства("МассивJSON");
	тЗапись.ЗаписатьНачалоМассива();
	тЗапись.ЗаписатьЗначение(1);
	тЗапись.ЗаписатьЗначение(2);
	тЗапись.ЗаписатьКонецМассива();
	тЗапись.ЗаписатьКонецОбъекта();
	тЗапись.Закрыть();
	ПоказатьОповещениеПользователя("Данные сохранены",,"Выполнено сохранение данных в файл "+КаталогЗагрузки+"\testStream.json");
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеJSONСтандартно(Команда)
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(КаталогЗагрузки+"\test.json");
	тДанные = ПрочитатьJSON(тЧтение, Ложь);
	
	тДатаJSON = ПрочитатьДатуJSON(тДанные.ДатаJSON, ФорматДатыJSON.ISO);
	
	тЧтение.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеJSONСПреобразованием(Команда)
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(КаталогЗагрузки+"\testPr.json");
	тДанные = ПрочитатьJSON(тЧтение, Ложь, , , "ФункцияВосстановления", ЭтотОбъект);
	тЧтение.Закрыть();
КонецПроцедуры
&НаКлиенте
Функция ФункцияВосстановления(Свойство, Значение, ДополнительныеПараметры) Экспорт
	Если Свойство = "ДатаJSON"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "СтрокаJSON" Тогда
		Возврат СокрЛП(Значение);
	КонецЕсли;
	Если Свойство = "uidJSON" Тогда
		Возврат Новый УникальныйИдентификатор(Значение);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЧтениеJSONПоток(Команда)
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(КаталогЗагрузки+"\testStream.json");
	Пока тЧтение.Прочитать() Цикл
		Сообщить("Тип текущего элемента " + тЧтение.ТипТекущегоЗначения);
		Если тЧтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			Сообщить("Имя = " + тЧтение.ТекущееЗначение);
		КонецЕсли;
		Если тЧтение.ТипТекущегоЗначения = ТипЗначенияJSON.Булево ИЛИ
			тЧтение.ТипТекущегоЗначения = ТипЗначенияJSON.Строка ИЛИ 
			тЧтение.ТипТекущегоЗначения = ТипЗначенияJSON.Число ИЛИ 
			тЧтение.ТипТекущегоЗначения = ТипЗначенияJSON.Комментарий Тогда
			Сообщить("Значение = " + тЧтение.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	тЧтение.Закрыть(); 
КонецПроцедуры
