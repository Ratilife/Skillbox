Процедура ЗаполнитьРеквизитыКонтрагента(Реквизиты, Контрагент, Период)
	
	// Общие сведения
	ИменаРеквизитовПредпринимателя = "ДокументУдостоверяющийЛичность, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи";
	ИменаРеквизитовОбъекта = "ЮридическоеФизическоеЛицо, Представление, ИНН, КодПоОКПО, РегистрационныйНомер, "
		+ "СтранаРегистрации, НалоговыйНомер, " + ИменаРеквизитовПредпринимателя;
		
	ЗначенияРеквизитовОбъекта = ОбщееНазначение.ЗначенияРеквизитовОбъекта(Контрагент, ИменаРеквизитовОбъекта);
		
	Реквизиты.ОГРН                             = ЗначенияРеквизитовОбъекта.РегистрационныйНомер;
	Реквизиты.ДатаРегистрации                  = Дата("00010101");
	Реквизиты.НалоговыйНомерВСтранеРегистрации = ЗначенияРеквизитовОбъекта.НалоговыйНомер;
	
	ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, , ИменаРеквизитовПредпринимателя); // Все, кроме реквизитов предпринимателя
	
	// (некоторые свойства зависят от того, как оформлен бизнес контрагента)
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, ИменаРеквизитовПредпринимателя);// Только реквизиты предпринимателя
	Иначе // Юридическое лицо
		Реквизиты.КПП = Справочники.Контрагенты.КППНаДату(Контрагент, Период);
	КонецЕсли;
	
	// Наименования
	Наименования = Справочники.Контрагенты.НаименованияНаДату(Контрагент, Период);
	ЗаполнитьЗначенияСвойств(Реквизиты, Наименования, "ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм");
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПолноеНаименованиеКонтрагента    = ?(Реквизиты.ПолноеНаименование = "ИП " + Реквизиты.Представление, Реквизиты.Представление, Реквизиты.ПолноеНаименование);
		Реквизиты.ФамилияИнициалыФизлица = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ПолноеНаименованиеКонтрагента);
	КонецЕсли;
	
	// Контактная информация
	//ЗаполнитьКонтактнуюИнформациюВРеквизитахКомпании(Реквизиты, Контрагент, Период);
	
КонецПроцедуры

// Предоставляет реквизиты компании (юридического лица или предпринимателя), например, для вывода в печатной форме.
//
// Параметры:
//  Компания		 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - компания, реквизиты которой нужно получить
//  Период			 - Дата - дата, на которую нужно получить значения периодических реквизитов
//  БанковскийСчет	 - СправочникСсылка.БанковскиеСчета - банковский счет, реквизиты которого нужно включить в реквизиты компании.
//                     Если не передан, будут включены реквизиты основного банковского счета.
// 
// Возвращаемое значение:
// см. НовыйРеквизитыКомпании() - коллекция общепринятых реквизитов компании.
//
Функция СведенияОЮрФизЛице(Компания, Период = '00010101', Знач БанковскийСчет = Неопределено, ПлатежВБюджет = Ложь) Экспорт
	
	Реквизиты = НовыйРеквизитыКомпании();
	
	Если Не ЗначениеЗаполнено(Компания) Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Если ТипЗнч(Компания) = Тип("СправочникСсылка.Организации") Тогда
		ЗаполнитьРеквизитыОрганизации(Реквизиты, Компания, Период);
	ИначеЕсли ТипЗнч(Компания) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗаполнитьРеквизитыКонтрагента(Реквизиты, Компания, Период);
	Иначе
		Возврат Реквизиты;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.БанковскиеСчета) Тогда
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчет = ПолучитьБанковскийСчетПоУмолчанию(Компания);
		КонецЕсли;
		
		//ЗаполнитьРеквизитыБанковскогоСчета(Реквизиты, БанковскийСчет);
		
	КонецЕсли;
	
	// Вторичные данные
	Реквизиты.Представление               = СокрЛП(Реквизиты.Представление);
	Реквизиты.ПолноеНаименование          = СокрЛП(Реквизиты.ПолноеНаименование);
	Реквизиты.СокращенноеНаименование     = СокрЛП(Реквизиты.СокращенноеНаименование);
	Реквизиты.НаименованиеДляПечатныхФорм = СокрЛП(Реквизиты.НаименованиеДляПечатныхФорм);
	Реквизиты.ТекстКорреспондента         = СокрЛП(Реквизиты.ТекстКорреспондента);
	
	Если Не ЗначениеЗаполнено(Реквизиты.ПолноеНаименование) Тогда
		Если ЗначениеЗаполнено(Реквизиты.СокращенноеНаименование) Тогда
			Реквизиты.ПолноеНаименование = Реквизиты.СокращенноеНаименование;
		Иначе
			Реквизиты.ПолноеНаименование = Реквизиты.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если ПлатежВБюджет И Не ПустаяСтрока(Реквизиты.ТекстКорреспондента) Тогда
		Реквизиты.ПолноеНаименование = Реквизиты.ТекстКорреспондента;
	КонецЕсли;
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И Не ПустаяСтрока(Реквизиты.СвидетельствоСерияНомер) Тогда
		Реквизиты.Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'свидетельство %1 от %2'"),
			Реквизиты.СвидетельствоСерияНомер,
			Формат(Реквизиты.СвидетельствоДатаВыдачи, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции
// Конструктор коллекции, содержащей общепринятые реквизиты компании (юридического лица или индивидуального предпринимателя).
// 
// Возвращаемое значение:
// Структура - см. содержимое функции
//
Функция НовыйРеквизитыКомпании() Экспорт
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("ЮридическоеФизическоеЛицо",          Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	// Наименования
	Реквизиты.Вставить("Представление",                      "");
	Реквизиты.Вставить("ПолноеНаименование",                 "");
	Реквизиты.Вставить("СокращенноеНаименование",            "");
	Реквизиты.Вставить("НаименованиеДляПечатныхФорм",        "");
	Реквизиты.Вставить("ФамилияИнициалыФизлица",             ""); // Фамилия И.О.
	Реквизиты.Вставить("ФИОФизлица",                         ""); // Фамилия Имя Отчество
	// Адреса и контактная информация
	Реквизиты.Вставить("ЮридическийАдрес",                   "");
	Реквизиты.Вставить("ЗначенияПолейЮридическийАдрес",      ""); // структурированное строковое представление адреса (XML или в формате "9 запятых")
	Реквизиты.Вставить("ЗначениеJSONЮридическийАдрес",       ""); // структурированное строковое представление адреса (JSON)
	Реквизиты.Вставить("ФактическийАдрес",                   ""); 
	Реквизиты.Вставить("ЗначенияПолейФактическийАдрес",      ""); // структурированное строковое представление адреса (XML или в формате "9 запятых")
	Реквизиты.Вставить("ЗначениеJSONФактическийАдрес",       ""); // структурированное строковое представление адреса (JSON)
	Реквизиты.Вставить("ПочтовыйАдрес",                      ""); 
	Реквизиты.Вставить("ЗначенияПолейПочтовыйАдрес",         ""); // структурированное строковое представление адреса (XML или в формате "9 запятых")
	Реквизиты.Вставить("ЗначениеJSONПочтовыйАдрес",              ""); // структурированное строковое представление адреса (JSON)
	Реквизиты.Вставить("Телефоны",                           ""); 
	Реквизиты.Вставить("ЗначенияПолейТелефоны",              ""); 
	Реквизиты.Вставить("ЗначениеJSONТелефоны",                   ""); 
	Реквизиты.Вставить("Факс",                               ""); 
	Реквизиты.Вставить("Email",                              "");
	// Регистрационные данные
	Реквизиты.Вставить("ОГРН",                               ""); // Здесь же ОГРНИП для ИП, рег. номер для иностранных контрагентов
	Реквизиты.Вставить("ДатаРегистрации",                    "");
	Реквизиты.Вставить("КодПоОКПО",                          "");
	Реквизиты.Вставить("ИНН",                                "");
	Реквизиты.Вставить("КПП",                                ""); // Только для ЮЛ
	Реквизиты.Вставить("СвидетельствоСерияНомер",            "");           // Только для ИП
	Реквизиты.Вставить("СвидетельствоДатаВыдачи",            '0001-01-01'); // Только для ИП
	Реквизиты.Вставить("Свидетельство",                      ""); // Свидетельство строкой, только для ИП
	Реквизиты.Вставить("ДокументУдостоверяющийЛичность",     ""); // Только для физлица
	Реквизиты.Вставить("ИндивидуальныйПредприниматель",      Справочники.ФизическиеЛица.ПустаяСсылка()); // Только для организаций-ИП
	Реквизиты.Вставить("СтранаРегистрации",                  Справочники.СтраныМира.ПустаяСсылка());
	Реквизиты.Вставить("НалоговыйНомерВСтранеРегистрации",   "");
	// Банковские реквизиты
	Реквизиты.Вставить("НомерСчета",                         "");
	Реквизиты.Вставить("ТекстКорреспондента",                "");
	Реквизиты.Вставить("БИК",                                "");
	Реквизиты.Вставить("Банк",                               "");
	Реквизиты.Вставить("АдресБанка",                         "");
	Реквизиты.Вставить("КоррСчет",                           "");
	// Должностные лица юридического лица
	Реквизиты.Вставить("РуководительФИО"                   , "");
	Реквизиты.Вставить("ДолжностьРуководителяПредставление", "");
	
	Возврат Реквизиты;
	
КонецФункции
Процедура ЗаполнитьРеквизитыОрганизации(Реквизиты, Организация, Период)
	
	// Константы
	//Реквизиты.СтранаРегистрации = Справочники.СтраныМира.Россия;
	
	// Общие сведения
	ИменаРеквизитовПредпринимателя = "ИндивидуальныйПредприниматель, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи";
	ИменаРеквизитовОбъекта = "ЮридическоеФизическоеЛицо, Представление, ИНН, ОГРН, ДатаРегистрации, КодПоОКПО, "
		+ ИменаРеквизитовПредпринимателя;
	ЗначенияРеквизитовОбъекта = ОбщееНазначение.ЗначенияРеквизитовОбъекта(Организация, ИменаРеквизитовОбъекта);
	
	ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, , ИменаРеквизитовПредпринимателя); // Все, кроме реквизитов предпринимателя
	// (некоторые свойства зависят от того, как оформлен бизнес)
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ЗначенияРеквизитовОбъекта, ИменаРеквизитовПредпринимателя); // Только реквизиты предпринимателя
	Иначе // Юридическое лицо
		
		Реквизиты.КПП = Справочники.Организации.КППНаДату(Организация, Период);
		
		Если Не ЗначениеЗаполнено(Период) Тогда
			// ОтветственныеЛицаБП.ОтветственныеЛица() не интерпретирует пустую дату как "акутальное значение"
			ПериодОтветственныхЛиц = ТекущаяДатаСеанса();
		Иначе
			ПериодОтветственныхЛиц = Период;
		КонецЕсли;
		
		ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ПериодОтветственныхЛиц);
		Если ЗначениеЗаполнено(ОтветственныеЛица) Тогда
			Реквизиты.РуководительФИО                    = ОтветственныеЛица.РуководительФИО;
			Реквизиты.ДолжностьРуководителяПредставление = ОтветственныеЛица.РуководительДолжностьПредставление; // имена свойств отличаются
		КонецЕсли;
		
	КонецЕсли;
	
	// Наименования
	Наименования = Справочники.Организации.НаименованияНаДату(Организация, Период);
	ЗаполнитьЗначенияСвойств(Реквизиты, Наименования, "ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм");
	
	Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Реквизиты.ФИОФизлица = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
			Наименования.ФИО.Фамилия,
			Наименования.ФИО.Имя,
			Наименования.ФИО.Отчество,
			Ложь);
		
		Реквизиты.ФамилияИнициалыФизлица = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Наименования.ФИО);
		
	КонецЕсли;
	
	// Контактная информация
	ЗаполнитьКонтактнуюИнформациюВРеквизитахКомпании(Реквизиты, Организация, Период);
	
КонецПроцедуры


Процедура ЗаполнитьКонтактнуюИнформациюВРеквизитахКомпании(Реквизиты, Компания, Период)
	
	//ВидыКонтактнойИнформации   = Новый Массив;       // Для передачи в УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату()
	//ИндексКонтактнойИнформации = Новый Соответствие; // Кеш для поиска
	//Для Каждого ОписаниеВидаКИ Из ВидыКонтактнойИнформацииКомпании(ТипЗнч(Компания)) Цикл
	//	ВидыКонтактнойИнформации.Добавить(ОписаниеВидаКИ.Значение);
	//	ИндексКонтактнойИнформации.Вставить(ОписаниеВидаКИ.Значение, ОписаниеВидаКИ.Ключ);
	//КонецЦикла;
	//
	//КонтактнаяИнформация = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
	//	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Компания),
	//	Неопределено, // типы определяются по видам - следующему параметру
	//	ВидыКонтактнойИнформации,
	//	Период);
	//
	//Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформация Цикл
	//	
	//	ИмяРеквизита = ИндексКонтактнойИнформации[ЭлементКонтактнойИнформации.Вид];
	//	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Реквизиты[ИмяРеквизита] = ЭлементКонтактнойИнформации.Представление;
	//	
	//	Если ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	//		
	//		// Заполним детальнее
	//		
	//		Если ИмяРеквизита = "ЮридическийАдрес" Тогда
	//			ИмяРеквизитаЗначенияПолейАдреса = "ЗначенияПолейЮридическийАдрес";
	//			ИмяРеквизитаЗначенияПолейАдресаJSON = "ЗначениеJSONЮридическийАдрес";
	//		ИначеЕсли ИмяРеквизита = "ФактическийАдрес" Тогда
	//			ИмяРеквизитаЗначенияПолейАдреса = "ЗначенияПолейФактическийАдрес";
	//			ИмяРеквизитаЗначенияПолейАдресаJSON = "ЗначениеJSONФактическийАдрес";
	//		Иначе // ПочтовыйАдрес
	//			ИмяРеквизитаЗначенияПолейАдреса = "ЗначенияПолейПочтовыйАдрес";
	//			ИмяРеквизитаЗначенияПолейАдресаJSON = "ЗначениеJSONПочтовыйАдрес";
	//		КонецЕсли;
	//		
	//		Реквизиты[ИмяРеквизитаЗначенияПолейАдреса] = ЭлементКонтактнойИнформации.ЗначенияПолей;
	//		Реквизиты[ИмяРеквизитаЗначенияПолейАдресаJSON] = ЭлементКонтактнойИнформации.Значение;
	//		
	//	ИначеЕсли ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
	//		
	//		Реквизиты["ЗначенияПолейТелефоны"] = ЭлементКонтактнойИнформации.ЗначенияПолей;
	//		Реквизиты["ЗначениеJSONТелефоны"] = ЭлементКонтактнойИнформации.Значение;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла; // По КонтактнаяИнформация
	
КонецПроцедуры

// Функция ПолучитьБанковскийСчетПоУмолчанию возвращает ссылку на 
// банковский счет организации или контрагента по умолчанию.
//
// Параметры:
//	ЮрФизЛицо 	- СправочникСсылка.Организации, СправочникСсылка.Контрагенты, лицо, 
//					для которого возвращается банковский счет.
//	Валюта 		- СправочникСсылка.Валюты, требуется для единообразия с БРУ и УП
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчета - основной банковский счет.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта = Неопределено) Экспорт

	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		БанковскийСчет = ОбщееНазначение.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ОсновнойБанковскийСчет");
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		
		БанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	Возврат БанковскийСчет;

КонецФункции // ПолучитьБанковскийСчетПоУмолчанию()
