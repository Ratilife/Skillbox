Процедура ПриСозданииНаСервере(Форма, ПараметрыРазмещения = Неопределено) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	Если ПараметрыРазмещения = Неопределено Тогда
		ПараметрыРазмещения = ПараметрыРазмещения();
	КонецЕсли; 
	//На основе параметров формы определяем переданная форма принадлежит объекту.
	ЭтоФормаОбъекта = Неопределено;
	Параметры = Форма.Параметры;
	ЕстьПараметрыСписка  = Параметры.Свойство("Отбор") И Параметры.Свойство("ТекущаяСтрока");
	ЕстьПараметрыОбъекта = Параметры.Свойство("Ключ")  И Параметры.Свойство("Основание");
	Если ЕстьПараметрыСписка <> ЕстьПараметрыОбъекта Тогда
		ЭтоФормаОбъекта = ЕстьПараметрыОбъекта;
	КонецЕсли;
	//ЧастиИмени = СтрРазделить(ИмяФормы,".");	  
	КэшФормы = КэшьФормы(ИмяФормы,ЭтоФормаОбъекта);    
	
	ПараметрыРазмещения.Вставить("ЕстьУсловияВидимости", КэшФормы.ЕстьУсловияВидимости);
	ПараметрыРазмещения.Вставить("ЭтоФормаОбъекта", КэшФормы.ЭтоФормаОбъекта);
	//ПараметрыРазмещения.Вставить("ВводНаОснованииЧерезПодключаемыеКоманды", КэшФормы.ВводНаОснованииЧерезПодключаемыеКоманды);
	
	Команды = КэшФормы.Команды.Скопировать();
	
	ВывестиКоманды(Форма, Команды, ПараметрыРазмещения);

КонецПроцедуры	

// Конструктор одноименного параметра процедуры ПодключаемыеКоманды.ПриСозданииНаСервере.
//
// Возвращаемое значение:
//   Структура - параметры размещения подключаемых команд:
//       * Источники - ОписаниеТипов
//                   - Массив из ОбъектМетаданных - источники команд.
//           Используется для второстепенных списков, а также в формах объектов, не являющихся поставщиками
//           команд (обработки, общие формы).
//       * КоманднаяПанель - ГруппаФормы - командная панель или группа команд, в которой выводятся подменю.
//           Используется как родитель для создания подменю в случае их отсутствия.
//           Если не указан то в первую очередь ищется группа "ПодключаемыеКоманды".
//       * ПрефиксГрупп - Строка - добавка к именам подменю и имени командной панели.
//           Используется при необходимости префиксации групп с командами (в частности, когда в форме несколько таблиц).
//           В качестве префикса рекомендуется использовать имя таблицы формы, для которой выводятся команды.
//           Например, если ПрефиксГрупп = "СкладскиеДокументы" (имя второстепенной таблицы формы),
//           то используются подменю с именами "СкладскиеДокументыПодменюПечать", "СкладскиеДокументыПодменюОтчеты" и т.д.
//
Функция ПараметрыРазмещения() Экспорт
	Результат = Новый Структура("Источники, КоманднаяПанель, ПрефиксГрупп");
	Результат.ПрефиксГрупп = "";
	Возврат Результат;
КонецФункции


Функция КэшьФормы(ИмяФормы, ЭтоФормаОбъекта)
     Команды = ТаблицаКоманд();
	 Источники = ДеревоИсточниковКоманд();  
	 НастройкиПрограммногоИнтерфейса = НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов();
	 ПодключенныеОбъекты = ТаблицаПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса);

	 
     КэшФормы = Новый Структура;
	 КэшФормы.Вставить("Команды", Команды);
	 КэшФормы.Вставить("ЕстьУсловияВидимости", Ложь);
	 КэшФормы.Вставить("ФункциональныеОпции", Новый Структура);    
	 
	 МетаданныеФормы = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
     МетаданныеРодителя = ?(МетаданныеФормы = Неопределено, Неопределено, МетаданныеФормы.Родитель());
	 ВидВРег = ВРег(СтрРазделить(ИмяФормы, ".")[0]);
     ТипыИсточников = Новый Массив;
	 Источник = ЗарегистрироватьИсточник(МетаданныеРодителя, Источники, ПодключенныеОбъекты, НастройкиПрограммногоИнтерфейса);
	 ДополнитьМассивТипов(ТипыИсточников, Источник.ТипСсылкиДанных);

     Если ЭтоФормаОбъекта = Истина И ТипыИсточников.Количество() = 1 И МетаданныеРодителя <> Метаданные.НайтиПоТипу(ТипыИсточников[0]) Тогда
		ЭтоФормаОбъекта = Ложь; // В форме объекта размещен список от другого типа объекта.
	 КонецЕсли;
	 
	 Если ЭтоФормаОбъекта = Неопределено Тогда
		Если ТипыИсточников.Количество() > 1 Тогда
			ЭтоФормаОбъекта = Ложь;
		ИначеЕсли МетаданныеРодителя <> Неопределено Тогда
			Коллекция = Новый Структура("ОсновнаяФормаСписка, ОсновнаяФормаОбъекта");
			ЗаполнитьЗначенияСвойств(Коллекция, МетаданныеРодителя);
			Если МетаданныеФормы = Коллекция.ОсновнаяФормаСписка Тогда
				ЭтоФормаОбъекта = Ложь;
			ИначеЕсли МетаданныеФормы = Коллекция.ОсновнаяФормаОбъекта И МетаданныеРодителя <> Метаданные.НайтиПоТипу(ТипыИсточников[0]) Тогда
				ЭтоФормаОбъекта = Истина;
			Иначе
				Если ВидВРег = ВРег("ЖурналДокументов") Тогда
					ЭтоФормаОбъекта = Ложь;
				ИначеЕсли ВидВРег = ВРег("Обработка") Тогда
					ЭтоФормаОбъекта = Ложь;
				Иначе
					ЭтоФормаОбъекта = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭтоФормаОбъекта = Ложь;
		КонецЕсли;
	 КонецЕсли;
	 
	 КэшФормы.Вставить("ЭтоФормаОбъекта", ЭтоФормаОбъекта);   
	 
	Контекст = Новый Структура;
	Контекст.Вставить("ВидВРег", ВидВРег);
	Контекст.Вставить("ИмяФормы", ИмяФормы);
	Контекст.Вставить("МетаданныеФормы", МетаданныеФормы);
	Контекст.Вставить("ТипыИсточников", ТипыИсточников);
	Контекст.Вставить("ЭтоФормаОбъекта", ЭтоФормаОбъекта);
	Контекст.Вставить("ФункциональныеОпции", КэшФормы.ФункциональныеОпции);
    ПриОпределенииКомандПодключенныхКОбъектуЗаполнениеОбъектов(Контекст, Источники, ПодключенныеОбъекты, Команды);
	ПриОпределенииКомандПодключенныхКОбъекту(Контекст, Источники, ПодключенныеОбъекты, Команды); 
     // Фильтр команд по именам форм и функциональным опциям.
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.ВГраница()];
	Количество = Команды.Количество();
	Для Номер = 1 По Количество Цикл
		Команда = Команды[Количество - Номер];
		// Значения по умолчанию.
		Если Команда.ИзменяетВыбранныеОбъекты = Неопределено Тогда
			Команда.ИзменяетВыбранныеОбъекты = Ложь;
		КонецЕсли;
		
		// Фильтр по назначению.
		Если Команда.Назначение = "ДляСписка" И Контекст.ЭтоФормаОбъекта Или Команда.Назначение = "ДляОбъекта" И Не Контекст.ЭтоФормаОбъекта Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		
		// Фильтр по именам форм.
		ВидимостьВФормах = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(Команда.ВидимостьВФормах), ",", Истина, Истина);
		Если ВидимостьВФормах.Количество() > 0
			И ВидимостьВФормах.Найти(ВРег(КраткоеИмяФормы)) = Неопределено
			И ВидимостьВФормах.Найти(ВРег(ИмяФормы)) = Неопределено Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		// Фильтр по функциональным опциям.
		ФункциональныеОпции = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Команда.ФункциональныеОпции, ",", Истина, Истина);
		ВидимостьКоманды = ФункциональныеОпции.Количество() = 0;
		Для Каждого ИмяОпции Из ФункциональныеОпции Цикл
			Если ПолучитьФункциональнуюОпцию(СокрЛП(ИмяОпции)) Тогда
				ВидимостьКоманды = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ВидимостьКоманды Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		// Динамические применяемые условия видимости.
		Если ТипЗнч(Команда.ТипПараметра) = Тип("Тип") Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Команда.ТипПараметра);
			Команда.ТипПараметра = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		Если ТипЗнч(Команда.ТипПараметра) = Тип("ОписаниеТипов") И ЗначениеЗаполнено(Команда.ТипПараметра) Тогда
			СодержитХотьОдинТип = Ложь;
			Для Каждого Тип Из ТипыИсточников Цикл
				Если Команда.ТипПараметра.СодержитТип(Тип) Тогда
					СодержитХотьОдинТип = Истина;
				Иначе
					Команда.ЕстьУсловияВидимости = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не СодержитХотьОдинТип Тогда
				Команды.Удалить(Команда);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Команда.УсловияВидимости) = Тип("Массив") И Команда.УсловияВидимости.Количество() > 0 Тогда
			Команда.ЕстьУсловияВидимости = Истина;
		КонецЕсли;
		Если Команда.МножественныйВыбор = Неопределено Тогда
			Команда.МножественныйВыбор = Истина;
		КонецЕсли;
		Команда.ПорядокВажности = ?(Команда.Важность = "Важное", 1, ?(Команда.Важность = "СмТакже", 3, 2));
		КэшФормы.ЕстьУсловияВидимости = КэшФормы.ЕстьУсловияВидимости Или Команда.ЕстьУсловияВидимости;
		
		Если ПустаяСтрока(Команда.Идентификатор) Тогда
			Команда.Идентификатор = "Авто_" + КонтрольнаяСуммаСтрокой(Команда.Менеджер + "/" + Команда.ИмяФормы + "/" + Команда.Обработчик);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КэшФормы;

КонецФункции // КэшьФормы()    

// Размещает подключенные команды в форме.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо разместить команды.
//   Команды - см. ТаблицаКоманд
//   ПараметрыРазмещения - см. ПараметрыРазмещения
//
Процедура ВывестиКоманды(Форма, Команды, ПараметрыРазмещения)
	
	ПодключенныеКоманды = ПодключенныеКоманды(Форма);
//	ПодключенныеКоманды.ВводНаОснованииЧерезПодключаемыеКоманды = ПараметрыРазмещения.ВводНаОснованииЧерезПодключаемыеКоманды;
	
	КлючПараметровРазмещения = КлючПараметровРазмещения(ПараметрыРазмещения);
	РанееДобавленныеКоманды = Неопределено;
#Область Извлечь3
	
	
	//Если ПодключенныеКоманды.АдресТаблицыКоманд <> Неопределено И ЭтоАдресВременногоХранилища(ПодключенныеКоманды.АдресТаблицыКоманд) Тогда
	//	РанееДобавленныеКоманды = ПолучитьИзВременногоХранилища(ПодключенныеКоманды.АдресТаблицыКоманд);
	//	УдаляемыеКоманды = РанееДобавленныеКоманды.НайтиСтроки(Новый Структура("КлючПараметровРазмещения", КлючПараметровРазмещения));
	//	УдалитьКоманды(Форма, УдаляемыеКоманды);
	//	Для Каждого Команда Из УдаляемыеКоманды Цикл
	//		КоллекцияКоманд = ПодключенныеКоманды.КомандыСПометкой;
	//		Для Индекс = -КоллекцияКоманд.ВГраница() По 0 Цикл
	//			КомандаПодменю = КоллекцияКоманд[-Индекс];
	//			Если КомандаПодменю.ИмяВФорме = Команда.ИмяВФорме Тогда
	//				КоллекцияКоманд.Удалить(-Индекс);
	//			КонецЕсли;
	//		КонецЦикла;
	//		Для Каждого Подменю Из ПодключенныеКоманды.ПодменюСУсловиямиВидимости Цикл
	//			КоллекцияКоманд = Подменю.КомандыСУсловиямиВидимости;
	//			Для Индекс = -КоллекцияКоманд.ВГраница() По 0 Цикл
	//				КомандаПодменю = КоллекцияКоманд[-Индекс];
	//				Если КомандаПодменю.ИмяВФорме = Команда.ИмяВФорме Тогда
	//					КоллекцияКоманд.Удалить(-Индекс);
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЦикла;
	//		РанееДобавленныеКоманды.Удалить(Команда);
	//	КонецЦикла;
	//КонецЕсли;
#КонецОбласти	
	ПодключенныеКоманды.ЕстьУсловияВидимости = ПодключенныеКоманды.ЕстьУсловияВидимости Или ПараметрыРазмещения.ЕстьУсловияВидимости;
	
	Элементы = Форма.Элементы;
	ПрефиксГрупп = ?(ЗначениеЗаполнено(ПараметрыРазмещения.ПрефиксГрупп), ПараметрыРазмещения.ПрефиксГрупп, "");
	
	КоманднаяПанель = ПараметрыРазмещения.КоманднаяПанель;
	Если КоманднаяПанель = Неопределено Тогда
		КоманднаяПанель = КоманднаяПанельФормы(Форма, ПрефиксГрупп, ПараметрыРазмещения.ЭтоФормаОбъекта);
	КонецЕсли;
	
	СведенияОВсехПодменю = СведенияОВсехПодменю();
	БыстрыйПоискСведенийОПодменю = Новый Соответствие;
	
	КорневыеПодменюИКоманды = ПодключенныеКоманды.КорневыеПодменюИКоманды;
	
	// Вывод команд.
	Команды.Сортировать("Вид, ПорядокВажности Возр, Порядок Возр, Представление Возр");
	СчетчикКомандСАвтогенерируемымИменем = 0;
	ВидыКоманд = ВидыКоманд();
	Для Каждого ВидКоманд Из ВидыКоманд Цикл
		ПроверитьИмяВидаКоманд(ВидКоманд.Имя);
		КомандыВида = Команды.НайтиСтроки(Новый Структура("Вид", ВидКоманд.Имя)); // Массив из СтрокаТаблицыЗначений: см. ТаблицаКоманд
		
		Если КомандыВида.Количество() = 0 И ВидКоманд.Имя <> "СозданиеНаОсновании" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПодменюПоУмолчанию = "";
		Если Не ПустаяСтрока(ВидКоманд.ИмяПодменю) Тогда
			ИмяПодменюПоУмолчанию = ПрефиксГрупп + ВидКоманд.ИмяПодменю;
		КонецЕсли;
		
		СведенияОПодменюПоУмолчанию = БыстрыйПоискСведенийОПодменю.Получить(НРег(ИмяПодменюПоУмолчанию));
		Если СведенияОПодменюПоУмолчанию = Неопределено Тогда
			СведенияОПодменюПоУмолчанию = ЗарегистрироватьПодменю(Элементы, СведенияОВсехПодменю, ИмяПодменюПоУмолчанию, ВидКоманд, КоманднаяПанель);
			БыстрыйПоискСведенийОПодменю.Вставить(НРег(ИмяПодменюПоУмолчанию), СведенияОПодменюПоУмолчанию);
		КонецЕсли;
		
		Для Каждого Команда Из КомандыВида Цикл 
			Если ПустаяСтрока(Команда.Подменю) Тогда
				СведенияОПодменюКоманды = СведенияОПодменюПоУмолчанию;
			Иначе
				ИмяПодменю = ПрефиксГрупп + Команда.Подменю;
				СведенияОПодменюКоманды = БыстрыйПоискСведенийОПодменю.Получить(НРег(ИмяПодменю));
				Если СведенияОПодменюКоманды = Неопределено Тогда
					СведенияОПодменюКоманды = ЗарегистрироватьПодменю(Элементы, СведенияОВсехПодменю, ИмяПодменю, , , СведенияОПодменюПоУмолчанию);
					БыстрыйПоискСведенийОПодменю.Вставить(НРег(ИмяПодменю), СведенияОПодменюКоманды);
				КонецЕсли;
			КонецЕсли;
			
			ГруппаФормы = Неопределено; // ГруппаФормы
			Если Не ЗначениеЗаполнено(Команда.Важность)
				Или Не СведенияОПодменюКоманды.Группы.Свойство(Команда.Важность, ГруппаФормы) Тогда
				ГруппаФормы = СведенияОПодменюКоманды.ГруппаПоУмолчанию;
			КонецЕсли;
			
			Команда.ИмяВФорме = ОпределитьИмяКоманды(Форма, ГруппаФормы.Имя, Команда.Идентификатор, СчетчикКомандСАвтогенерируемымИменем);
			Команда.КлючПараметровРазмещения = КлючПараметровРазмещения;
			
			Подменю = СведенияОПодменюКоманды.Подменю; // ГруппаФормы
			ИмяКорневогоЭлемента = ?(ВидКоманд.Имя = "КоманднаяПанель", Команда.ИмяВФорме, Подменю.Имя);
			Если КорневыеПодменюИКоманды.Найти(ИмяКорневогоЭлемента) = Неопределено Тогда
				КорневыеПодменюИКоманды.Добавить(ИмяКорневогоЭлемента);
			КонецЕсли;
			
			КомандаФормы = Форма.Команды.Добавить(Команда.ИмяВФорме);
			КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
			КомандаФормы.Заголовок = Команда.Представление;
			КомандаФормы.Подсказка   = КомандаФормы.Заголовок;
			КомандаФормы.Отображение = ?(ЗначениеЗаполнено(Команда.ОтображениеКнопки),
				Команда.ОтображениеКнопки, ОтображениеКнопки.КартинкаИТекст);
			Если ТипЗнч(Команда.Картинка) = Тип("Картинка") Тогда
				КомандаФормы.Картинка = Команда.Картинка;
			КонецЕсли;
			Если ТипЗнч(Команда.СочетаниеКлавиш) = Тип("СочетаниеКлавиш") Тогда
				КомандаФормы.СочетаниеКлавиш = Команда.СочетаниеКлавиш;
			КонецЕсли;
			Если СведенияОПодменюКоманды.Подменю = КоманднаяПанель
				И СтрДлина(Команда.Представление) > 35
				И ЗначениеЗаполнено(КомандаФормы.Картинка) Тогда
				КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
			КонецЕсли;
			КомандаФормы.ИзменяетСохраняемыеДанные = Команда.ИзменяетВыбранныеОбъекты И ПараметрыРазмещения.ЭтоФормаОбъекта И Форма.ТолькоПросмотр;
			
			КнопкаФормы = Элементы.Добавить(Команда.ИмяВФорме, Тип("КнопкаФормы"), ГруппаФормы);
			КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			КнопкаФормы.ИмяКоманды = Команда.ИмяВФорме;
			КнопкаФормы.ТолькоВоВсехДействиях = Команда.ТолькоВоВсехДействиях;
			
			Если ЗначениеЗаполнено(Команда.ЗначениеПометки) И ЭтоПутьДоРеквизита(Команда.ЗначениеПометки) Тогда
				Команда.ЗначениеПометки = ВыражениеВычислениеПометки(Команда.ЗначениеПометки);
				ПодключенныеКоманды.КомандыСПометкой.Добавить(ОписаниеКомандыНаКлиенте(Команда, КнопкаФормы));
			КонецЕсли;
			
			СведенияОПодменюКоманды.ВыведеноКоманд = СведенияОПодменюКоманды.ВыведеноКоманд + 1;
			СведенияОПодменюКоманды.ПоследняяКоманда = КомандаФормы;
			Если Команда.ЕстьУсловияВидимости Тогда
				СведенияОПодменюКоманды.ЕстьКомандыСУсловиямиВидимости = Истина;
				СведенияОКоманде = Новый Структура("ИмяВФорме, ТипПараметра, УсловияВидимости, УсловияВидимостиПоТипамОбъектов");
				ЗаполнитьЗначенияСвойств(СведенияОКоманде, Команда);
				СведенияОПодменюКоманды.КомандыСУсловиямиВидимости.Добавить(СведенияОКоманде);
			ИначеЕсли Не Команда.ТолькоВоВсехДействиях Тогда
				СведенияОПодменюКоманды.ЕстьКомандыБезУсловийВидимости = Истина;
			КонецЕсли;
		КонецЦикла;
		
		//СозданиеНаОсновании.ПриВыводеКоманд(Форма, ВидКоманд, СведенияОПодменюПоУмолчанию, ПараметрыРазмещения);
	КонецЦикла;
	
	// Команда-заглушка нужна всегда.
	КомандаЗаглушка = Форма.Команды.Найти("КомандаДляВыводаВПустоеПодменю");
	Если КомандаЗаглушка = Неопределено Тогда
		КомандаЗаглушка = Форма.Команды.Добавить("КомандаДляВыводаВПустоеПодменю");
		КомандаЗаглушка.Заголовок = НСтр("ru = '(нет)'");
	КонецЕсли;
	
	// Постобработка задействованных подменю.
	Для Каждого СведенияОПодменю Из СведенияОВсехПодменю Цикл
		Если СведенияОПодменю.ВыведеноКоманд = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЭтоКоманднаяПанель = (СведенияОПодменю.Подменю = КоманднаяПанель);
		КомандаФормы = СведенияОПодменю.ПоследняяКоманда;
		Подменю = СведенияОПодменю.Подменю; // ГруппаФормы
		
		Если Не ЭтоКоманднаяПанель Тогда
			Если СведенияОПодменю.ВыведеноКоманд = 1 И КомандаФормы <> Неопределено Тогда
				// Превращение подменю в кнопку когда выведена 1 команда с коротким заголовком.
				Если Не ЗначениеЗаполнено(КомандаФормы.Картинка) И Подменю.Вид = ВидГруппыФормы.Подменю Тогда
					КомандаФормы.Картинка = Подменю.Картинка;
				КонецЕсли;
				Если СтрДлина(КомандаФормы.Заголовок) <= 35 И Подменю.Отображение <> ОтображениеКнопки.Картинка Тогда
					КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
				Иначе
					КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
				КонецЕсли;
				Подменю.Вид = ВидГруппыФормы.ГруппаКнопок;
				КомандаФормы.Подсказка = КомандаФормы.Заголовок;
			Иначе
				// Добавление кнопок-заглушек, которые показываются когда в подменю скрыты все команды.
				ИмяКомандыЗаглушки = Подменю.Имя + "Заглушка";
				Если Элементы.Найти(ИмяКомандыЗаглушки) = Неопределено Тогда
					КнопкаФормы = Элементы.Добавить(ИмяКомандыЗаглушки, Тип("КнопкаФормы"), Подменю);
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды  = "КомандаДляВыводаВПустоеПодменю";
					КнопкаФормы.Видимость   = Ложь;
					КнопкаФормы.Доступность = Ложь;
					КнопкаФормы.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СведенияОПодменю.ЕстьКомандыСУсловиямиВидимости Тогда
			КраткиеСведенияОПодменю = КраткиеСведенияОПодменю(СведенияОПодменю);
			КраткиеСведенияОПодменю.Имя = Подменю.Имя;
			ПодключенныеКоманды.ПодменюСУсловиямиВидимости.Добавить(КраткиеСведенияОПодменю);
		КонецЕсли;
	КонецЦикла;
	
	Если РанееДобавленныеКоманды <> Неопределено Тогда
		РанееДобавленныеКоманды = ПолучитьИзВременногоХранилища(ПодключенныеКоманды.АдресТаблицыКоманд);
		Если ТипЗнч(РанееДобавленныеКоманды) = Тип("ТаблицаЗначений") Тогда
			Индекс = -1;
			Для Каждого СтрокаТаблицы Из РанееДобавленныеКоманды Цикл
				Индекс = Индекс + 1;
				ЗаполнитьЗначенияСвойств(Команды.Вставить(Индекс), СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		УдалитьИзВременногоХранилища(ПодключенныеКоманды.АдресТаблицыКоманд);
	КонецЕсли;
	
	Команды.Колонки.Удалить("СочетаниеКлавиш");
	ПодключенныеКоманды.АдресТаблицыКоманд = ПоместитьВоВременноеХранилище(Команды, Форма.УникальныйИдентификатор);
	
КонецПроцедуры


// Шаблон сведений об объектах метаданных - источников команд.
//
// Возвращаемое значение:
//   см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.Источники.
//
Функция ДеревоИсточниковКоманд() Экспорт
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Метаданные");
	Результат.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Менеджер");
	Результат.Колонки.Добавить("СсылкаМетаданных");
	Результат.Колонки.Добавить("ТипСсылкиДанных");
	Результат.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЭтоЖурналДокументов", Новый ОписаниеТипов("Булево"));
	Возврат Результат;
КонецФункции

 // Шаблон таблицы подключаемых команд.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Вид - Строка
//   * Идентификатор - Строка
//   * Представление - Строка
//   * Подменю - Строка
//   * Важность - Строка
//   * Порядок - Число
//   * Картинка - Картинка
//   * СочетаниеКлавиш - СочетаниеКлавиш
//   * ОтображениеКнопки - Неопределено
//   * ТолькоВоВсехДействиях - Булево
//   * ЗначениеПометки - Строка
//   * ТипПараметра - ОписаниеТипов
//   * ВидимостьВФормах - Строка
//   * Назначение - Строка
//   * ФункциональныеОпции - Строка
//   * УсловияВидимости - Массив
//   * ИзменяетВыбранныеОбъекты - Булево
//   * МножественныйВыбор - Булево, Неопределено
//   * РежимЗаписи - Строка
//   * ТребуетсяРаботаСФайлами - Булево
//   * Менеджер - Строка
//   * Обработчик - Строка
//   * ДополнительныеПараметры - Структура
//   * ИмяФормы - Строка
//   * ПараметрыФормы - Структура, Неопределено
//   * ИмяПараметраФормы - Строка
//   * ПорядокВажности - Число
//   * ИмяВФорме - Строка
//   * ЕстьУсловияВидимости - Булево
//   * КлючПараметровРазмещения - Строка
//
Функция ТаблицаКоманд()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	// Настройки внешнего вида:
	Таблица.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Подменю", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Важность", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Картинка"); // Картинка.
	Таблица.Колонки.Добавить("СочетаниеКлавиш"); // СочетаниеКлавиш.
	Таблица.Колонки.Добавить("ОтображениеКнопки");
	Таблица.Колонки.Добавить("ТолькоВоВсехДействиях", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ЗначениеПометки", Новый ОписаниеТипов("Строка"));
	// Настройки видимости и доступность:
	Таблица.Колонки.Добавить("ТипПараметра"); // ОписаниеТипов.
	Таблица.Колонки.Добавить("ВидимостьВФормах", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Назначение", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("УсловияВидимости", Новый ОписаниеТипов("Массив"));
	Таблица.Колонки.Добавить("ИзменяетВыбранныеОбъекты"); // Булево или Неопределено.
	// Настройки процесса выполнения:
	Таблица.Колонки.Добавить("МножественныйВыбор"); // Булево или Неопределено.
	Таблица.Колонки.Добавить("РежимЗаписи", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТребуетсяРаботаСФайлами", Новый ОписаниеТипов("Булево"));
	// Настройки обработчика:
	Таблица.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ИмяФормы", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПараметрыФормы"); // Структура или Неопределено.
	Таблица.Колонки.Добавить("ИмяПараметраФормы", Новый ОписаниеТипов("Строка"));
	// Служебные:
	Таблица.Колонки.Добавить("ПорядокВажности", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ИмяВФорме", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕстьУсловияВидимости", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("КлючПараметровРазмещения", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("УсловияВидимостиПоТипамОбъектов", Новый ОписаниеТипов("Соответствие"));
		
	Возврат Таблица;
КонецФункции

#Область Извлечь

//// Формирует таблицу общих настроек всех расширений, подключенных к объекту метаданных.
//Функция ПодключенныеОбъекты(ОписаниеИсточника, ПодключенныеОбъекты = Неопределено, НастройкиПрограммногоИнтерфейса = Неопределено) Экспорт
//	Источники = ДеревоИсточниковКоманд();
//	Если ТипЗнч(ОписаниеИсточника) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
//		Источник = Источники.Строки.Добавить();
//		Источник.СсылкаМетаданных = ОписаниеИсточника;
//		Источник.ТипСсылкиДанных = ЗначениеРеквизитаОбъекта(ОписаниеИсточника, "ЗначениеПустойСсылки");
//	Иначе
//		Источник = ОписаниеИсточника;
//	КонецЕсли;
//	
//	Если ПодключенныеОбъекты = Неопределено Тогда
//		ПодключенныеОбъекты = ТаблицаПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса);
//	КонецЕсли;
//	Если Источник.СсылкаМетаданных = Неопределено Тогда
//		Возврат ПодключенныеОбъекты;
//	КонецЕсли;
//	
//	ПолныеИменаПодключенныхОбъектов = Параметры().ПодключенныеОбъекты[Источник.СсылкаМетаданных];
//	Если ПолныеИменаПодключенныхОбъектов = Неопределено Тогда
//		Возврат ПодключенныеОбъекты;
//	КонецЕсли;
//	
//	Для Каждого ПолноеИмя Из ПолныеИменаПодключенныхОбъектов Цикл
//		ПодключенныйОбъект = ПодключенныеОбъекты.Найти(ПолноеИмя, "ПолноеИмя");
//		Если ПодключенныйОбъект = Неопределено Тогда
//			НастройкиПодключаемогоОбъекта = НастройкиПодключаемогоОбъекта(ПолноеИмя, НастройкиПрограммногоИнтерфейса);
//			Если НастройкиПодключаемогоОбъекта = Неопределено Тогда
//				Продолжить;
//			КонецЕсли;
//			ПодключенныйОбъект = ПодключенныеОбъекты.Добавить();
//			ЗаполнитьЗначенияСвойств(ПодключенныйОбъект, НастройкиПодключаемогоОбъекта);
//			ПодключенныйОбъект.ТипСсылкиДанных = Источник.ТипСсылкиДанных;
//			ПодключенныйОбъект.Метаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
//		Иначе
//			ПодключенныйОбъект.ТипСсылкиДанных = ОбъединитьТипы(ПодключенныйОбъект.ТипСсылкиДанных, Источник.ТипСсылкиДанных);
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат ПодключенныеОбъекты;
//КонецФункции     




//// Возвращает ссылки, соответствующие объектам метаданных, для использования в базе данных.
//// См. также ОбщегоНазначения.ИдентификаторОбъектаМетаданных.
////
//// Ссылки возвращаются для следующих объектов метаданных:
//// - Подсистемы (см. также ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных);
//// - Роли (см. также ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных);
//// - ПланыОбмена.
//// - Константы.
//// - Справочники.
//// - Документы.
//// - ЖурналыДокументов.
//// - Отчеты.
//// - Обработки.
//// - ПланыВидовХарактеристик.
//// - ПланыСчетов.
//// - ПланыВидовРасчета.
//// - РегистрыСведений.
//// - РегистрыНакопления.
//// - РегистрыБухгалтерии.
//// - РегистрыРасчета.
//// - БизнесПроцессы.
//// - Задачи.
//// 
//// Параметры:
////  ОписаниеОбъектовМетаданных - Массив из ОбъектМетаданных - объекты метаданных конфигурации;
////                             - Массив из Строка - полные имена объектов метаданных, которые можно использовать
////                         в функции Метаданные.НайтиПоПолномуИмени;
////                             - Массив из Тип - типы, которые можно использовать в функции Метаданные.НайтиПоТипу.
////  ВызыватьИсключение - Булево - если Ложь, то несуществующие и неподдерживаемые объекты метаданных
////                                будут пропущены в возвращаемом значении.
////
//// Возвращаемое значение:
////  Соответствие из КлючИЗначение:
////    * Ключ     - Строка - полное имя указанного объекта метаданных.
////    * Значение - СправочникСсылка.ИдентификаторыОбъектовМетаданных
////               - СправочникСсылка.ИдентификаторыОбъектовРасширений - найденный идентификатор.
////
//// Пример:
////  ПолныеИмена = Новый Массив;
////  ПолныеИмена.Добавить(Метаданные.Справочники.Валюты.ПолноеИмя());
////  ПолныеИмена.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
////  Идентификаторы = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ПолныеИмена);
////
//Функция ИдентификаторыОбъектовМетаданных(ОписаниеОбъектовМетаданных, ВызыватьИсключение = Истина) Экспорт
//	
//	Возврат Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторыОбъектовМетаданных(
//		ОписаниеОбъектовМетаданных, ВызыватьИсключение);
//	
//КонецФункции

//// Возвращает значения реквизита, прочитанного из информационной базы по ссылке на объект.
//// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
//// для быстрого чтения отдельных реквизитов объекта из базы данных.
////
//// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//// то следует использовать предварительный переход в привилегированный режим.
////
//// Параметры:
////  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
////            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
////  ИмяРеквизита       - Строка - имя получаемого реквизита.
////                                Допускается указание имени реквизита через точку, но при этом параметр КодЯзыка для
////                                такого реквизита учитываться не будет.
////  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя;
////                                если есть ограничение на уровне записей, то возвращается Неопределено;
////                                если нет прав для работы с таблицей, то возникнет исключение;
////                                если Ложь, то возникнет исключение при отсутствии прав на таблицу
////                                или любой из реквизитов.
////  КодЯзыка - Строка - код языка для мультиязычного реквизита. Значение по умолчанию - основной язык конфигурации.
////
//// Возвращаемое значение:
////  Произвольный - если в параметр Ссылка передана пустая ссылка, то возвращается Неопределено.
////                 Если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
////                 то возвращается Неопределено.
////
//Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт
//	
//	Если ПустаяСтрока(ИмяРеквизита) Тогда 
//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Неверный второй параметр %1 в функции %2: 
//				|Имя реквизита должно быть заполнено.'"), "ИмяРеквизита", "ОбщегоНазначения.ЗначениеРеквизитаОбъекта");
//	КонецЕсли;
//	
//	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные, КодЯзыка);
//	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
//	
//КонецФункции 

//Функция Параметры() Экспорт
//	
//	УстановитьОтключениеБезопасногоРежима(Истина);
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Параметры = СтандартныеПодсистемыСервер.ПараметрРаботыПрограммы("СтандартныеПодсистемы.ПодключаемыеКоманды");
//	Если Параметры = Неопределено Тогда
//		ПодключаемыеКоманды.ОперативноеОбновлениеОбщихДанныхКонфигурации();
//		Параметры = СтандартныеПодсистемыСервер.ПараметрРаботыПрограммы("СтандартныеПодсистемы.ПодключаемыеКоманды");
//		Если Параметры = Неопределено Тогда
//			Возврат Новый ФиксированнаяСтруктура("ПодключенныеОбъекты", Новый Соответствие);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
//		ПараметрыРасширений = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(ПодключаемыеКоманды.ПолноеИмяПодсистемы());
//		Если ПараметрыРасширений = Неопределено Тогда
//			ПодключаемыеКоманды.ПриЗаполненииВсехПараметровРаботыРасширений();
//			ПараметрыРасширений = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(ПодключаемыеКоманды.ПолноеИмяПодсистемы());
//			Если ПараметрыРасширений = Неопределено Тогда
//				Возврат Новый ФиксированнаяСтруктура(Параметры);
//			КонецЕсли;
//		КонецЕсли;
//		ДополнитьСоответствиеСМассивами(Параметры.ПодключенныеОбъекты, ПараметрыРасширений.ПодключенныеОбъекты);
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	УстановитьОтключениеБезопасногоРежима(Ложь);
//	
//	Возврат Новый ФиксированнаяСтруктура(Параметры);
//КонецФункции
#КонецОбласти
Функция НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов() Экспорт
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОписаниеТипов", Новый ОписаниеТипов("ОписаниеТипов"));
	Таблица.Колонки.Добавить("ВидыПодключаемыхОбъектов", Новый ОписаниеТипов("Строка"));
	
	Настройка = Таблица.Добавить();
	Настройка.Ключ          = "Размещение";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Массив");
	Настройка.ВидыПодключаемыхОбъектов = "Отчет, Обработка";
	
	//ЗаполнениеОбъектов.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(Таблица);
	//СозданиеНаОсновании.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(Таблица);
	//ИнтеграцияПодсистемБСП.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(Таблица);
	ПриОпределенииСоставаНастроекПодключаемыхОбъектов(Таблица);
	
	Возврат Таблица;
КонецФункции                        

Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ          = "ДобавитьКомандыПечати";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");  
	//---------
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ          = "ДобавитьКомандыЗаполнения";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
    //---------
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ          = "ДобавитьКомандыСозданияНаОсновании";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");

КонецПроцедуры

// Шаблон сведений об отчетах и обработках, подключенных к источникам команд.
//
// Возвращаемое значение:
//   ТаблицаЗначений - вспомогательные параметры:
//       * ПолноеИмя  - Строка           - полное имя объекта. Например: "Документ.ИмяДокумента".
//       * Менеджер   - Произвольный     - модуль менеджера объекта.
//       * Размещение - Массив           - список объектов, к которым подключен отчет или обработка.
//       * ТипСсылкиДанных - Тип
//                         - ОписаниеТипов - тип объектов, к которым подключен отчет или обработка..
//
Функция ТаблицаПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса = Неопределено) Экспорт
	//Если НастройкиПрограммногоИнтерфейса = Неопределено Тогда
	//	НастройкиПрограммногоИнтерфейса = НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов();
	//КонецЕсли;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Менеджер");
	Таблица.Колонки.Добавить("Метаданные");
	Таблица.Колонки.Добавить("ТипСсылкиДанных");
	
	Для Каждого Настройка Из НастройкиПрограммногоИнтерфейса Цикл
		Попытка
			Таблица.Колонки.Добавить(Настройка.Ключ, Настройка.ОписаниеТипов);
		Исключение
			//ТекстОшибки = НСтр("ru = 'Не удалось зарегистрировать настройку программного интерфейса подключаемых объектов.
			//	|Ключ: ""%1"", описание типов: ""%2"", описание ошибки: ""%3"".'");
			//ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			//	ТекстОшибки,
			//	Настройка.Ключ,
			//	Строка(Настройка.ОписаниеТипов),
			//	КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			//ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
	Таблица.Индексы.Добавить("ПолноеИмя");
	
	Возврат Таблица;
КонецФункции

 //Регистрирует в дереве источников команд объект метаданных, а также вспомогательные объекты метаданных,
 //  подключенных к указанному объекту метаданных.
 //
 //Параметры:
 //  ОбъектМетаданных - ОбъектМетаданных - объект метаданных, к которому подключены источники команд.
 //  Источники - см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.Источники.
 //  ПодключенныеОбъекты - см. ПодключаемыеКоманды.ТаблицаПодключаемыхОбъектов
 //  НастройкиПрограммногоИнтерфейса - см. ПодключаемыеКоманды.НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов
 //
 //Возвращаемое значение:
 //  СтрокаДереваЗначений - настройки объекта метаданных. См. описание 2 параметра
 //      процедуры ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту().
 //
Функция ЗарегистрироватьИсточник(ОбъектМетаданных, Источники, ПодключенныеОбъекты, НастройкиПрограммногоИнтерфейса) Экспорт
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Менеджер  = МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	Если Менеджер = Неопределено Тогда
		Возврат Неопределено; // Объект не может быть источником команд.
	КонецЕсли;
	
	Источник = Источники.Строки.Добавить();
	Источник.Метаданные          = ОбъектМетаданных;
	Источник.ПолноеИмя           = ПолноеИмя;
	Источник.Менеджер            = Менеджер;
	Источник.СсылкаМетаданных    = ИдентификаторОбъектаМетаданных(ПолноеИмя);
	Источник.Вид                 = ВРег(СтрРазделить(ПолноеИмя, ".")[0]);
	Источник.ЭтоЖурналДокументов = (Источник.Вид = "ЖУРНАЛДОКУМЕНТОВ");
	
	Если Источник.ЭтоЖурналДокументов Тогда
		МассивТипов = Новый Массив;
		Для Каждого МетаданныеДокумента Из ОбъектМетаданных.РегистрируемыеДокументы Цикл
			Документ = ЗарегистрироватьИсточник(МетаданныеДокумента, Источник, ПодключенныеОбъекты, НастройкиПрограммногоИнтерфейса);
			Если Документ <> Неопределено Тогда
				МассивТипов.Добавить(Документ.ТипСсылкиДанных);
			КонецЕсли;
		КонецЦикла;
		Источник.ТипСсылкиДанных = Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли Не Метаданные.Обработки.Содержит(ОбъектМетаданных) И Не Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		Источник.ТипСсылкиДанных = Тип(Источник.Вид + "Ссылка." + ОбъектМетаданных.Имя);
	КонецЕсли;
	
	//ПодключенныеОбъекты(Источник, ПодключенныеОбъекты, НастройкиПрограммногоИнтерфейса);
	
	Возврат Источник;
КонецФункции
#Область Извлечь2
// Возвращает менеджер объекта по имени.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Имя - Строка - имя например, "Справочник", "Справочники", "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникиМенеджер
//  СправочникМенеджер
//  ДокументыМенеджер
//  ДокументМенеджер
//  ...
//
//Функция МенеджерОбъектаПоИмени(Имя)
//	Перем КлассОМ, ИмяОМ, Менеджер;
//	
//	ЧастиИмени = СтрРазделить(Имя, ".");
//	
//	Если ЧастиИмени.Количество() > 0 Тогда
//		КлассОМ = ВРег(ЧастиИмени[0]);
//	КонецЕсли;
//	
//	Если ЧастиИмени.Количество() > 1 Тогда
//		ИмяОМ = ЧастиИмени[1];
//	КонецЕсли;
//	
//	Если      КлассОМ = "ПЛАНОБМЕНА"
//	 Или      КлассОМ = "ПЛАНЫОБМЕНА" Тогда
//		Менеджер = ПланыОбмена;
//		
//	ИначеЕсли КлассОМ = "СПРАВОЧНИК"
//	      Или КлассОМ = "СПРАВОЧНИКИ" Тогда
//		Менеджер = Справочники;
//		
//	ИначеЕсли КлассОМ = "ДОКУМЕНТ"
//	      Или КлассОМ = "ДОКУМЕНТЫ" Тогда
//		Менеджер = Документы;
//		
//	ИначеЕсли КлассОМ = "ЖУРНАЛДОКУМЕНТОВ"
//	      Или КлассОМ = "ЖУРНАЛЫДОКУМЕНТОВ" Тогда
//		Менеджер = ЖурналыДокументов;
//		
//	ИначеЕсли КлассОМ = "ПЕРЕЧИСЛЕНИЕ"
//	      Или КлассОМ = "ПЕРЕЧИСЛЕНИЯ" Тогда
//		Менеджер = Перечисления;
//		
//	ИначеЕсли КлассОМ = "ОБЩИЙМОДУЛЬ"
//	      Или КлассОМ = "ОБЩИЕМОДУЛИ" Тогда
//		
//		Возврат ОбщийМодуль(ИмяОМ);
//		
//	ИначеЕсли КлассОМ = "ОТЧЕТ"
//	      Или КлассОМ = "ОТЧЕТЫ" Тогда
//		Менеджер = Отчеты;
//		
//	ИначеЕсли КлассОМ = "ОБРАБОТКА"
//	      Или КлассОМ = "ОБРАБОТКИ" Тогда
//		Менеджер = Обработки;
//		
//	ИначеЕсли КлассОМ = "ПЛАНВИДОВХАРАКТЕРИСТИК"
//	      Или КлассОМ = "ПЛАНЫВИДОВХАРАКТЕРИСТИК" Тогда
//		Менеджер = ПланыВидовХарактеристик;
//		
//	ИначеЕсли КлассОМ = "ПЛАНСЧЕТОВ"
//	      Или КлассОМ = "ПЛАНЫСЧЕТОВ" Тогда
//		Менеджер = ПланыСчетов;
//		
//	ИначеЕсли КлассОМ = "ПЛАНВИДОВРАСЧЕТА"
//	      Или КлассОМ = "ПЛАНЫВИДОВРАСЧЕТА" Тогда
//		Менеджер = ПланыВидовРасчета;
//		
//	ИначеЕсли КлассОМ = "РЕГИСТРСВЕДЕНИЙ"
//	      Или КлассОМ = "РЕГИСТРЫСВЕДЕНИЙ" Тогда
//		Менеджер = РегистрыСведений;
//		
//	ИначеЕсли КлассОМ = "РЕГИСТРНАКОПЛЕНИЯ"
//	      Или КлассОМ = "РЕГИСТРЫНАКОПЛЕНИЯ" Тогда
//		Менеджер = РегистрыНакопления;
//		
//	ИначеЕсли КлассОМ = "РЕГИСТРБУХГАЛТЕРИИ"
//	      Или КлассОМ = "РЕГИСТРЫБУХГАЛТЕРИИ" Тогда
//		Менеджер = РегистрыБухгалтерии;
//		
//	ИначеЕсли КлассОМ = "РЕГИСТРРАСЧЕТА"
//	      Или КлассОМ = "РЕГИСТРЫРАСЧЕТА" Тогда
//		
//		Если ЧастиИмени.Количество() < 3 Тогда
//			// Регистр расчета
//			Менеджер = РегистрыРасчета;
//		Иначе
//			КлассПодчиненногоОМ = ВРег(ЧастиИмени[2]);
//			Если ЧастиИмени.Количество() > 3 Тогда
//				ИмяПодчиненногоОМ = ЧастиИмени[3];
//			КонецЕсли;
//			Если КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТ"
//			 Или КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТЫ" Тогда
//				// Перерасчет
//				Попытка
//					Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
//					ИмяОМ = ИмяПодчиненногоОМ;
//				Исключение
//					Менеджер = Неопределено;
//				КонецПопытки;
//			КонецЕсли;
//		КонецЕсли;
//		
//	ИначеЕсли КлассОМ = "БИЗНЕСПРОЦЕСС"
//	      Или КлассОМ = "БИЗНЕСПРОЦЕССЫ" Тогда
//		Менеджер = БизнесПроцессы;
//		
//	ИначеЕсли КлассОМ = "ЗАДАЧА"
//	      Или КлассОМ = "ЗАДАЧИ" Тогда
//		Менеджер = Задачи;
//		
//	ИначеЕсли КлассОМ = "КОНСТАНТА"
//	      Или КлассОМ = "КОНСТАНТЫ" Тогда
//		Менеджер = Константы;
//		
//	ИначеЕсли КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТЬ"
//	      Или КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТИ" Тогда
//		Менеджер = Последовательности;
//	КонецЕсли;
//	
//	Если Менеджер <> Неопределено Тогда
//		Если ЗначениеЗаполнено(ИмяОМ) Тогда
//			Попытка
//				Возврат Менеджер[ИмяОМ];
//			Исключение
//				Менеджер = Неопределено;
//			КонецПопытки;
//		Иначе
//			Возврат Менеджер;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить менеджер для объекта ""%1""'"), Имя);
//	
//КонецФункции  
#КонецОбласти

Процедура ПроверитьОбъектМетаданныхСуществует(ПолноеИмя)
	
	Если Метаданные.НайтиПоПолномуИмени(ПолноеИмя) = Неопределено Тогда 
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестный тип объекта метаданных ""%1"".'"), ПолноеИмя);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет типы в массив.
//
// Параметры:
//   Массив - Массив - массив типов.
//   ТипИлиОписаниеТипов - Тип
//                       - ОписаниеТипов - добавляемые типы.
//
Процедура ДополнитьМассивТипов(Массив, ТипИлиОписаниеТипов) Экспорт
	Если ТипЗнч(ТипИлиОписаниеТипов) = Тип("ОписаниеТипов") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, ТипИлиОписаниеТипов.Типы(), Истина);
	ИначеЕсли ТипЗнч(ТипИлиОписаниеТипов) = Тип("Тип") И Массив.Найти(ТипИлиОписаниеТипов) = Неопределено Тогда
		Массив.Добавить(ТипИлиОписаниеТипов);
	КонецЕсли;
КонецПроцедуры 

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
// 
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ   = ЧастиИмени[1];
	Иначе 
		Менеджер = Неопределено;
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		
		Если      ЧастиИмени.Количество() = 2 Тогда
			Менеджер = РегистрыРасчета;
			
		ИначеЕсли ЧастиИмени.Количество() = 4 Тогда
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];
			
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда 
				Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
				ИмяОм = ИмяПодчиненногоОМ;
				
			Иначе 
				Менеджер = Неопределено;
			КонецЕсли;
			
		Иначе
			Менеджер = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
		
	Иначе
		Менеджер = Неопределено;
	КонецЕсли;
	
	Если Менеджер = Неопределено Тогда
		ПроверитьОбъектМетаданныхСуществует(ПолноеИмя);
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект метаданных ""%1"" не имеет менеджера объекта.'"), ПолноеИмя);
	КонецЕсли;
	
	Попытка
		Возврат Менеджер[ИмяОМ];
	Исключение
		ПроверитьОбъектМетаданныхСуществует(ПолноеИмя);
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции
Процедура ПриОпределенииКомандПодключенныхКОбъектуЗаполнениеОбъектов(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	КомандыЗаполнения = Команды.СкопироватьКолонки();
	КомандыЗаполнения.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	КомандыЗаполнения.Индексы.Добавить("Обработана");
	
	СтандартнаяОбработка = Источники.Строки.Количество() > 0;
	//ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения(КомандыЗаполнения, НастройкиФормы, СтандартнаяОбработка);
	КомандыЗаполнения.ЗаполнитьЗначения(Истина, "Обработана");
	
	ДопустимыеТипы = Новый Массив; // Типы источников, которые пользователь может изменять (см. ниже проверку права "Изменение").
	Если СтандартнаяОбработка Тогда
		//ОбъектыСКомандамиЗаполнения = ОбъектыСКомандамиЗаполнения();
		Для Каждого Источник Из Источники.Строки Цикл
			Для Каждого ДокументРегистратор Из Источник.Строки Цикл
				Если Не ДокументРегистратор.ЭтоЖурналДокументов
					И Не ПравоДоступа("Изменение", ДокументРегистратор.Метаданные) Тогда
					Продолжить;
				КонецЕсли;
				ДополнитьМассивТипов(ДопустимыеТипы, ДокументРегистратор.ТипСсылкиДанных);
				//Если ОбъектыСКомандамиЗаполнения.Найти(ДокументРегистратор.Метаданные) <> Неопределено Тогда
				//	ПриДобавленииКомандЗаполнения(КомандыЗаполнения, ДокументРегистратор, НастройкиФормы);
				//КонецЕсли;
			КонецЦикла;
			Если Не Источник.ЭтоЖурналДокументов
				И Не ПравоДоступа("Изменение", Источник.Метаданные) Тогда
				Продолжить;
			КонецЕсли;
			ДополнитьМассивТипов(ДопустимыеТипы, Источник.ТипСсылкиДанных);
			//Если ОбъектыСКомандамиЗаполнения.Найти(Источник.Метаданные) <> Неопределено Тогда
			//	ПриДобавленииКомандЗаполнения(КомандыЗаполнения, Источник, НастройкиФормы);
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДопустимыеТипы.Количество() = 0 Тогда
		Возврат; // Все закрыто и команд расширений с допустимыми типами тоже не будет.
	КонецЕсли;
	
	Найденные = ПодключенныеОтчетыИОбработки.НайтиСтроки(Новый Структура("ДобавитьКомандыЗаполнения", Истина));
	Для Каждого ПодключенныйОбъект Из Найденные Цикл
		ПриДобавленииКомандЗаполнения(КомандыЗаполнения, ПодключенныйОбъект, НастройкиФормы, ДопустимыеТипы);
	КонецЦикла;
	
	Для Каждого КомандаЗаполнения Из КомандыЗаполнения Цикл
		Команда = Команды.Добавить();
		ЗаполнитьЗначенияСвойств(Команда, КомандаЗаполнения);
		Команда.Вид = "ЗаполнениеОбъектов";
		Если Команда.Порядок = 0 Тогда
			Команда.Порядок = 50;
		КонецЕсли;
		Если Команда.РежимЗаписи = "" Тогда
			Команда.РежимЗаписи = "Записывать";
		КонецЕсли;
		Если КомандаЗаполнения.ИзменяетВыбранныеОбъекты = Неопределено Тогда
			Команда.ИзменяетВыбранныеОбъекты = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПриДобавленииКомандЗаполнения(Команды, СведенияОбОбъекте, НастройкиФормы, ДопустимыеТипы = Неопределено)
	СведенияОбОбъекте.Менеджер.ДобавитьКомандыЗаполнения(Команды, НастройкиФормы);
	ДобавленныеКоманды = Команды.НайтиСтроки(Новый Структура("Обработана", Ложь));
	Для Каждого Команда Из ДобавленныеКоманды Цикл
		Если Не ЗначениеЗаполнено(Команда.Менеджер) Тогда
			Команда.Менеджер = СведенияОбОбъекте.ПолноеИмя;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Команда.ТипПараметра) Тогда
			Команда.ТипПараметра = СведенияОбОбъекте.ТипСсылкиДанных;
		КонецЕсли;
		Если ДопустимыеТипы <> Неопределено И Не ТипВМассиве(Команда.ТипПараметра, ДопустимыеТипы) Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		Команда.Обработана = Истина;
	КонецЦикла;
КонецПроцедуры


Функция ТипВМассиве(ТипИлиОписаниеТипов, МассивТипов)
	Если ТипЗнч(ТипИлиОписаниеТипов) = Тип("ОписаниеТипов") Тогда
		Для Каждого Тип Из ТипИлиОписаниеТипов.Типы() Цикл
			Если МассивТипов.Найти(Тип) <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь
	Иначе
		Возврат МассивТипов.Найти(ТипИлиОписаниеТипов) <> Неопределено;
	КонецЕсли;
КонецФункции


Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды)
	СписокОбъектов = Новый Массив;
	Для Каждого Источник Из Источники.Строки Цикл
		СписокОбъектов.Добавить(Источник.Метаданные);
	КонецЦикла;
	Если Источники.Строки.Количество() = 1 И ЭтоЖурналДокументов(Источники.Строки[0].Метаданные) Тогда
		СписокОбъектов = Неопределено;
	КонецЕсли;
	
	КомандыПечати = КомандыПечатиФормы(НастройкиФормы.ИмяФормы, СписокОбъектов);
	
		КлючиПараметровОбработчика = "Обработчик, МенеджерПечати, ЗаголовокФормы, СразуНаПринтер, ФорматСохранения,
	|ПереопределитьПользовательскиеНастройкиКоличества, ДополнитьКомплектВнешнимиПечатнымиФормами,
	|ФиксированныйКомплект, ДополнительныеПараметры";
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		Если КомандаПечати.Отключена Тогда
			Продолжить;
		КонецЕсли;
		Команда = Команды.Добавить();
		ЗаполнитьЗначенияСвойств(Команда, КомандаПечати, , "Обработчик");
		Команда.Вид = "Печать";
		Команда.Подменю = КомандаПечати.МестоРазмещения;
		Команда.МножественныйВыбор = Истина;
		Если КомандаПечати.ТипыОбъектовПечати.Количество() > 0 Тогда
			Команда.ТипПараметра = Новый ОписаниеТипов(КомандаПечати.ТипыОбъектовПечати);
		КонецЕсли;
		Команда.ВидимостьВФормах = КомандаПечати.СписокФорм;
		Если КомандаПечати.НеВыполнятьЗаписьВФорме Тогда
			Команда.РежимЗаписи = "НеЗаписывать";
		ИначеЕсли КомандаПечати.ПроверкаПроведенияПередПечатью Тогда
			Команда.РежимЗаписи = "Проводить";
		Иначе
			Команда.РежимЗаписи = "Записывать";
		КонецЕсли;
		Команда.ТребуетсяРаботаСФайлами = КомандаПечати.ТребуетсяРасширениеРаботыСФайлами;
		
		Команда.Обработчик = "УправлениеПечатьюСлужебныйКлиент.ОбработчикКоманды";
		Команда.ДополнительныеПараметры = Новый Структура(КлючиПараметровОбработчика);
		ЗаполнитьЗначенияСвойств(Команда.ДополнительныеПараметры, КомандаПечати);
	КонецЦикла;
	

КонецПроцедуры	    
// разобраться
Процедура ПриОпределенииКомандПодключенныхКОбъектуОбновлениеИнформационнойБазы(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Команда = Команды.Добавить();
	Команда.Вид = "ОбновлениеВерсииИБ";
	Команда.Представление = НСтр("ru = 'Разблокировать объект для редактирования'");
	Команда.РежимЗаписи = "НеЗаписывать";
	Команда.Назначение = "ДляОбъекта";
	Команда.ТолькоВоВсехДействиях = Истина;
	Команда.Обработчик = "ОбновлениеИнформационнойБазыКлиент.РазблокироватьОбъектДляРедактирования";
	
	
	ДобавитьУсловиеВидимостиКоманды(Команда, "ОбновлениеВерсииИБ_ОбъектЗаблокирован");
	
КонецПроцедуры

// Задает условия видимости команды на форме в зависимости от контекста.
//
// Параметры:
//   Команда      - СтрокаТаблицыЗначений: см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//   Реквизит     - Строка                - имя реквизита объекта.
//   Значение     - Произвольный          - значение реквизита объекта. Параметр обязательный для всех видов
//                                          сравнения кроме Заполнено и НеЗаполнено.
//   ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения значений.
//       Допустимо использовать следующие виды сравнения:
//         ВидСравненияКомпоновкиДанных.Равно,
//         ВидСравненияКомпоновкиДанных.НеРавно,
//         ВидСравненияКомпоновкиДанных.Заполнено,
//         ВидСравненияКомпоновкиДанных.НеЗаполнено,
//         ВидСравненияКомпоновкиДанных.ВСписке,
//         ВидСравненияКомпоновкиДанных.НеВСписке,
//         ВидСравненияКомпоновкиДанных.Больше,
//         ВидСравненияКомпоновкиДанных.Меньше,
//         ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
//         ВидСравненияКомпоновкиДанных.МеньшеИлиРавно.
//       Значение по умолчанию - ВидСравненияКомпоновкиДанных.Равно.
//
Процедура ДобавитьУсловиеВидимостиКоманды(Команда, Реквизит, Значение = Неопределено, Знач ВидСравнения = Неопределено) Экспорт
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	УсловиеВидимости = Новый Структура;
	УсловиеВидимости.Вставить("Реквизит", Реквизит);
	УсловиеВидимости.Вставить("ВидСравнения", ВидСравнения);
	УсловиеВидимости.Вставить("Значение", Значение);
	Команда.УсловияВидимости.Добавить(УсловиеВидимости);
КонецПроцедуры


Функция КомандыПечатиФормы(Форма, СписокОбъектов = Неопределено) Экспорт 
	ИмяФормы = Форма;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы); 
	
	Если ОбъектМетаданных <> Неопределено И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	Иначе
		ОбъектМетаданных = Неопределено;
	КонецЕсли;
	
	//Если ОбъектМетаданных <> Неопределено Тогда
	//	СсылкаОМ = ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	//КонецЕсли;
	
	КомандыПечати = СоздатьКоллекциюКомандПечати(); 
	//СтандартнаяОбработка = Истина;  
	//Если СтандартнаяОбработка Тогда
	Если СписокОбъектов <> Неопределено Тогда
		ЗаполнитьКомандыПечатиДляСпискаОбъектов(СписокОбъектов, КомандыПечати);
	ИначеЕсли ОбъектМетаданных = Неопределено Тогда
		Возврат КомандыПечати;
	КонецЕсли;	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		Если КомандаПечати.Порядок = 0 Тогда
			КомандаПечати.Порядок = 50;
		КонецЕсли;
		КомандаПечати.ДополнительныеПараметры.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами);
	КонецЦикла;
    Если ОбъектМетаданных <> Неопределено Тогда
		//УстановитьНастройкиКомандПечати(КомандыПечати);
	КонецЕсли;
    КомандыПечати.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество()-1];
	
	// фильтр по именам форм
	Для НомерСтроки = -КомандыПечати.Количество() + 1 По 0 Цикл
		КомандаПечати = КомандыПечати[-НомерСтроки];
		СписокФорм = СтрРазделить(КомандаПечати.СписокФорм, ",", Ложь);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыПечати.Удалить(КомандаПечати);
		КонецЕсли;
	КонецЦикла;
    ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати, Форма);

     Возврат КомандыПечати;
 КонецФункции
 
 // Создает пустую таблицу с описанием команд печати.
// Таблица команд печати передается в процедуры ДобавитьКомандыПечати, 
// размещенные в модулях менеджеров объектов конфигурации, которые перечислены в процедуре
// УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//
//   * Идентификатор - Строка - идентификатор команды печати, по которому менеджер печати определяет печатную
//                             форму, которую необходимо сформировать.
//                             Например, "СчетЗаказ".
//
//                              Для печати нескольких печатных форм можно указывать одновременно несколько их
//                              идентификаторов (строкой, через запятую либо массивом строк), например:
//                              "СчетЗаказ,ГарантийноеПисьмо".
//
//                              Если необходимо задать количество копий печати для печатной формы, то ее
//                              идентификатор нужно продублировать столько раз, сколько копий необходимо
//                              сформировать. При этом следует учитывать, что порядок следования печатных
//                              форм в комплекте будет соответствовать порядку идентификаторов печатных форм,
//                              указанных в этом параметре. Например (2 счета на оплату + 1 гарантийное письмо):
//                              "СчетЗаказ,СчетЗаказ,ГарантийноеПисьмо".
//
//                              Идентификатор печатной формы может содержать в себе и альтернативный менеджер
//                              печати, если он отличается от указанного в параметре МенеджерПечати,
//                              например: "СчетЗаказ,Обработка.ПечатнаяФорма.ГарантийноеПисьмо".
//
//                              В этом примере ГарантийноеПисьмо формируется в менеджере печати
//                              Обработка.ПечатнаяФорма, а СчетЗаказ - в менеджере печати, указанном в
//                              параметре МенеджерПечати.
//                              
//                              Для печатных форм, менеджером печати которых является общий модуль
//                             "УправлениеПечатью", в качестве идентификатора необходимо указать полный путь к макету.
//                             Например, "Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_СчетНаОплату".
//
//                   - Массив - список идентификаторов команд печати.
//
//   * Представление - Строка            - представление команды в меню Печать. 
//                                         Например, "Счет на оплату".
//
//   * МенеджерПечати - Строка           - (необязательный) имя объекта, в модуле менеджера которого располагается
//                                        процедура Печать, формирующая табличные документы для этой команды.
//                                        Если печатная форма формируется автоматически по данным печати и макету, то
//                                        в параметре необходимо указать общий модуль "УправлениеПечатью".
//                                        Значение по умолчанию - имя модуля менеджера объекта.
//                                        Например, "Документ.СчетНаОплатуПокупателю".
//   * ТипыОбъектовПечати - Массив       - (необязательный) список типов объектов, для которых предназначена команда
//                                        печати. Параметр предназначен для команд печати в журналах документов, где
//                                        требуется проверка передаваемого типа объекта перед вызовом менеджера печати.
//                                        Если список не заполнен, то при автоматическом создании списка команд печати
//                                        в журнале документов он заполняется типом объекта, из которого была
//                                        импортирована команда печати.
//
//   * Обработчик    - Строка            - (необязательный) клиентский обработчик команды, в который необходимо передать
//                                        управление вместо стандартного обработчика команды Печать. Используется,
//                                        например, когда печатная форма формируется на клиенте.
//                                        Формат "<ИмяОбщегоМодуля>.<ИмяПроцедуры>" используется, когда процедура размещена
//                                        в общем модуле.
//                                        Формат "<ИмяПроцедуры>" используется, когда процедура размещена
//                                        в модуле основной формы отчета или обработки, указанной в МенеджерПечати.
//                                        Например,
//                                          КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
//                                        Пример обработчика в модуле формы:
//                                          // Формирует печатную форму <представление печатной формы>.
//                                          //
//                                          // Параметры:
//                                          //   ПараметрыПечати - Структура - сведения о печатной форме.
//                                          //       * ОбъектыПечати - Массив - массив ссылок выбранных объектов.
//                                          //       * Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана
//                                          //                                              команда печати.
//                                          //       * ДополнительныеПараметры - Структура - дополнительные параметры печати.
//                                          //       Прочие ключи структуры соответствуют колонкам таблицы КомандыПечати,
//                                          //       подробнее см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//                                          //
//                                          &НаКлиенте
//                                          Функция <ИмяФункции>(ПараметрыПечати) Экспорт
//                                          	// Обработчик печати.
//                                          КонецФункции
//                                        Следует иметь в виду, что обработчик вызывается при помощи метода Вычислить,
//                                        поэтому в качестве обработчика может выступать только функция.
//                                        При этом возвращаемое значение функции никак в дальнейшем не используется подсистемой.
//
//   * Порядок       - Число             - (необязательный) Значение от 1 до 100, указывающее порядок размещения команды
//                                        по отношению к другим командам. Сортировка команд меню Печать осуществляется
//                                        сначала по полю Порядок, затем по представлению.
//                                        Значение по умолчанию - 50.
//
//   * Картинка      - Картинка          - (необязательный) Картинка, которая отображается возле команды в меню Печать.
//                                         Например, БиблиотекаКартинок.ФорматPDF.
//
//   * СписокФорм    - Строка            - (необязательный) Имена форм через запятую, в которых должна отображаться
//                                        команда. Если параметр не указан, то команда печати будет отображаться во
//                                        всех формах объекта, где встроена подсистема Печать.
//                                         Например, "ФормаДокумента".
//
//   * МестоРазмещения - Строка          - (необязательный) Имя группы формы, в которую необходимо разместить
//                                        команду печати. Параметр необходимо использовать только в случае, когда на
//                                        форме размещается более одного подменю "Печать". В остальных случаях место
//                                        размещения необходимо задавать в модуле формы при вызове
//                                        метода ПодключаемыеКоманды.ПриСозданииНаСервере.
//                                        
//   * ЗаголовокФормы  - Строка          - (необязательный) Произвольная строка, переопределяющая стандартных заголовок
//                                        формы "Печать документов". Например, "Настраиваемый комплект".
//
//   * ФункциональныеОпции - Строка      - (необязательный) Имена функциональных опций через запятую, от которых зависит
//                                        доступность команды печати.
//
//   * УсловияВидимости - Массив         - (необязательный) Коллекция условий видимости команды в зависимости от
//                                        контекста. Условия видимости команды задаются при помощи процедуры 
//                                        ДобавитьУсловиеВидимостиКоманды.
//                                        Если параметр не задан, команда видна вне зависимости от контекста.
//                                        
//   * ПроверкаПроведенияПередПечатью    - Булево - (необязательный) Признак необходимости проверки проведенности
//                                        документов перед печатью. Если выбран хотя бы один непроведенный документ, то
//                                        перед выполнением команды печати возникает диалог проведения.
//                                        Для непроведенных документов команда печати не выполняется.
//                                        Если параметр не указан, то проверка проведенности не выполняется.
//
//   * СразуНаПринтер - Булево           - (необязательный) Признак необходимости печати документов без предварительного
//                                        просмотра, сразу на принтер. Если параметр не указан, то при выборе команды
//                                        печати открывается форма предварительного просмотра "Печать документов".
//
//   * ФорматСохранения - ТипФайлаТабличногоДокумента - (необязательный) Применяется для быстрого сохранения печатной
//                                        формы (без дополнительных действий) в различные форматы, отличные от mxl.
//                                        Если параметр не указан, то формируется обычный mxl.
//                                        Например, ТипФайлаТабличногоДокумента.PDF.
//
//                                        При выборе команды печати сразу открывается сформированный в формате pdf
//                                        документ.
//
//   * ПереопределитьПользовательскиеНастройкиКоличества - Булево - (необязательный) Признак необходимости отключения в
//                                        форме ПечатьДокументов механизма сохранения/восстановления выбранного
//                                        пользователем количества экземпляров на печать. Если параметр не указан, то
//                                        механизм сохранения/восстановления настроек будет работать при открытии формы.
//                                        ПечатьДокументов.
//
//   * ДополнитьКомплектВнешнимиПечатнымиФормами - Булево - (необязательный) Признак необходимости дополнить комплект
//                                        документов всеми подключенными к объекту внешними печатными формами
//                                        (подсистема ДополнительныеОтчетыИОбработки). Если параметр не указан, внешние
//                                        печатные формы не добавляются в комплект.
//
//   * ФиксированныйКомплект - Булево    - (необязательный) Признак необходимости блокировки от изменения пользователем
//                                        состава комплекта документов. Если параметр не указан, то пользователь сможет
//                                        исключать отдельные печатные формы из комплекта в форме ПечатьДокументов, а
//                                        также изменять их количество.
//
//   * ДополнительныеПараметры - Структура - (необязательный) произвольные параметры для передачи в менеджер печати.
//
//   * НеВыполнятьЗаписьВФорме - Булево  - (необязательный) Признак необходимости отключения механизма записи объекта
//                                        перед выполнением команды печати. Используется в исключительных случаях. Если
//                                        параметр не указан, производится запись объекта в случае, если в форме
//                                        объекта установлен признак модифицированности.
//
//   * ТребуетсяРасширениеРаботыСФайлами - Булево - (необязательный) Признак необходимости подключения расширения работы
//                                        с файлами перед выполнением команды. Если параметр не указан, подключение
//                                        расширения работы с файлами выполняться не будет.
//
Функция СоздатьКоллекциюКомандПечати() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	// описание
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//////////
	// Опции (необязательные параметры).
	
	// менеджер печати
	Результат.Колонки.Добавить("МенеджерПечати", Неопределено);
	Результат.Колонки.Добавить("ТипыОбъектовПечати", Новый ОписаниеТипов("Массив"));
	
	// Альтернативный обработчик команды.
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	// представление
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	// Имена форм для размещения команд, разделитель - запятая.
	Результат.Колонки.Добавить("СписокФорм", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("МестоРазмещения", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗаголовокФормы", Новый ОписаниеТипов("Строка"));
	// Имена функциональных опций, влияющих на видимость команды, разделитель - запятая.
	Результат.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	
	// Динамические условия видимости.
	Результат.Колонки.Добавить("УсловияВидимости", Новый ОписаниеТипов("Массив"));
	
	// проверка проведения
	Результат.Колонки.Добавить("ПроверкаПроведенияПередПечатью", Новый ОписаниеТипов("Булево"));
	
	// вывод
	Результат.Колонки.Добавить("СразуНаПринтер", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ФорматСохранения"); // ТипФайлаТабличногоДокумента
	
	// настройки комплектов
	Результат.Колонки.Добавить("ПереопределитьПользовательскиеНастройкиКоличества", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ДополнитьКомплектВнешнимиПечатнымиФормами", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ФиксированныйКомплект", Новый ОписаниеТипов("Булево")); // запрет изменения комплекта
	
	// дополнительные параметры
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	// Специальный режим выполнения команды
	// по умолчанию выполняется запись модифицированного объекта перед выполнением команды.
	Результат.Колонки.Добавить("НеВыполнятьЗаписьВФорме", Новый ОписаниеТипов("Булево"));
	
	// Для использования макетов офисных документов в веб-клиенте.
	Результат.Колонки.Добавить("ТребуетсяРасширениеРаботыСФайлами", Новый ОписаниеТипов("Булево"));
	
	// Для служебного использования.
	Результат.Колонки.Добавить("СкрытаФункциональнымиОпциями", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отключена", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ИмяКомандыНаФорме", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("УсловияВидимостиПоТипамОбъектов", Новый ОписаниеТипов("Соответствие"));
	
	Возврат Результат;
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Журнал документов".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является журналом документов.
//
Функция ЭтоЖурналДокументов(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных);
	
КонецФункции

// Собирает список команд печати из нескольких объектов.
Процедура ЗаполнитьКомандыПечатиДляСпискаОбъектов(СписокОбъектов, КомандыПечати)
	ИсточникиКомандПечати = Новый Соответствие;
	Для Каждого ИсточникКомандПечати Из ИсточникиКомандПечати() Цикл
		ИсточникиКомандПечати.Вставить(ИсточникКомандПечати, Истина);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из СписокОбъектов Цикл
		Если ИсточникиКомандПечати[ОбъектМетаданных] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомандыПечатиФормы = КомандыПечатиОбъекта(ОбъектМетаданных);
		
		Для Каждого ДобавляемаяКомандаПечати Из КомандыПечатиФормы Цикл
			Если ДобавляемаяКомандаПечати.Отключена Тогда
				Продолжить;
			КонецЕсли;
			// Поиск аналогичной ранее добавленной команды печати.
			НайденныеКоманды = КомандыПечати.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ДобавляемаяКомандаПечати.УникальныйИдентификатор));
			
			Для Каждого ИмеющаясяКомандаПечати Из НайденныеКоманды Цикл
				// Если уже есть такая команда, дополняем список типов объектов, для которых она предназначена.
				ТипОбъекта = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка."));
				Если ИмеющаясяКомандаПечати.ТипыОбъектовПечати.Найти(ТипОбъекта) = Неопределено Тогда
					ИмеющаясяКомандаПечати.ТипыОбъектовПечати.Добавить(ТипОбъекта);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДобавляемаяКомандаПечати.УсловияВидимости) Тогда
					ИмеющаясяКомандаПечати.УсловияВидимостиПоТипамОбъектов.Вставить(ТипОбъекта, ДобавляемаяКомандаПечати.УсловияВидимости);
				КонецЕсли;
				// Очистим МенеджерПечати в случае, если у имеющейся команды он отличается.
				Если ИмеющаясяКомандаПечати.МенеджерПечати <> ДобавляемаяКомандаПечати.МенеджерПечати Тогда
					ИмеющаясяКомандаПечати.МенеджерПечати = "";
				КонецЕсли;
			КонецЦикла;
			Если НайденныеКоманды.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДобавляемаяКомандаПечати.ТипыОбъектовПечати.Количество() = 0 Тогда
				ДобавляемаяКомандаПечати.ТипыОбъектовПечати.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка.")));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), ДобавляемаяКомандаПечати);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ИсточникиКомандПечати() Экспорт
	ОбъектыСКомандамиПечати = Новый Массив;
	
	СписокОбъектов = Новый Массив;
    ПриОпределенииОбъектовСКомандамиПечатиПереопределяемый(СписокОбъектов);
	ДополнитьМассив(ОбъектыСКомандамиПечати, СписокОбъектов, Истина);
	Результат = Новый Массив;
	Для Каждого ОбъектМенеджер Из ОбъектыСКомандамиПечати Цикл
		Результат.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ОбъектМенеджер)));
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечатиПереопределяемый(СписокОбъектов) Экспорт
	
	// Добавить в процедуру ПриОпределенииОбъектовСКомандамиПечати
	СписокОбъектов.Добавить(Справочники.Договора);
	
КонецПроцедуры   

Функция КомандыПечатиОбъекта(ОбъектМетаданных, СПечатнымиФормами = Истина) Экспорт
	КомандыПечати = СоздатьКоллекциюКомандПечати();
	Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда 
		Возврат КомандыПечати;
	КонецЕсли;	
	
	Источники = ДеревоИсточниковКоманд();
	НастройкиAPI = НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов();
	ПодключенныеОтчетыИОбработки = ТаблицаПодключаемыхОбъектов(НастройкиAPI);
	Источник = ЗарегистрироватьИсточник(ОбъектМетаданных, Источники, ПодключенныеОтчетыИОбработки, НастройкиAPI);
	Если Источник.Менеджер = Неопределено Тогда
		Возврат КомандыПечати;
	КонецЕсли;
	
	ДобавляемыеКомандыПечати = СоздатьКоллекциюКомандПечати();
	Источник.Менеджер.ДобавитьКомандыПечати(ДобавляемыеКомандыПечати);

	//Если СПечатнымиФормами Тогда
	//	ДобавитьКомандыПечати(ДобавляемыеКомандыПечати, ОбъектМетаданных);
	//КонецЕсли;
	
	Для Каждого КомандаПечати Из ДобавляемыеКомандыПечати Цикл
		Если КомандаПечати.МенеджерПечати = Неопределено Тогда
			КомандаПечати.МенеджерПечати = Источник.ПолноеИмя;
		КонецЕсли;
		Если КомандаПечати.Порядок = 0 Тогда
			КомандаПечати.Порядок = 50;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), КомандаПечати);
	КонецЦикла;
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
	//	МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
	//	МодульДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, Источник.ПолноеИмя);
	//КонецЕсли;
	
	КомандыПечати.Индексы.Добавить("МенеджерПечати");
	Найденные = ПодключенныеОтчетыИОбработки.НайтиСтроки(Новый Структура("ДобавитьКомандыПечати", Истина));
	Для Каждого ПодключенныйОбъект Из Найденные Цикл
		ПодключенныйОбъект.Менеджер.ДобавитьКомандыПечати(КомандыПечати);
		ДобавленныеКоманды = КомандыПечати.НайтиСтроки(Новый Структура("МенеджерПечати", Неопределено));
		Для Каждого Команда Из ДобавленныеКоманды Цикл
			Команда.МенеджерПечати = ПодключенныйОбъект.ПолноеИмя;
		КонецЦикла;
	КонецЦикла;
	
	ТипОбъекта = Неопределено;
	Если ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
		ТипОбъекта = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка."));
	КонецЕсли;
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		КомандаПечати.ДополнительныеПараметры.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами);
		Если ЗначениеЗаполнено(ТипОбъекта) И ЗначениеЗаполнено(КомандаПечати.УсловияВидимости) Тогда
			КомандаПечати.УсловияВидимостиПоТипамОбъектов.Вставить(ТипОбъекта, КомандаПечати.УсловияВидимости);
		КонецЕсли;
	КонецЦикла;
	
	КомандыПечати.Сортировать("Порядок Возр, Представление Возр");
	//УстановитьНастройкиКомандПечати(КомандыПечати, Источник.СсылкаМетаданных);
	ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати);
	
	КомандыПечати.Индексы.Добавить("УникальныйИдентификатор");
	Возврат КомандыПечати;
КонецФункции

Процедура УстановитьНастройкиКомандПечати(КомандыПечати)
   УстановитьПривилегированныйРежим(Истина);
   СписокОтключенных = Новый Соответствие;
   Для Каждого КомандаПечати Из КомандыПечати Цикл
		КомандаПечати.УникальныйИдентификатор = УникальныйИдентификаторКомандыПечати(КомандаПечати);
		Если СписокОтключенных[КомандаПечати.УникальныйИдентификатор] <> Неопределено Тогда
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
		КомандаПечати.ФорматСохранения = Строка(КомандаПечати.ФорматСохранения);
	КонецЦикла;

КонецПроцедуры

// Фильтрует список команд печати в соответствии с установленными функциональными опциями.
Процедура ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати, Форма = Неопределено)
	Для каждого ОписаниеКомандыПечати Из КомандыПечати Цикл
		ФункциональныеОпцииКомандыПечати = СтрРазделить(ОписаниеКомандыПечати.ФункциональныеОпции, ", ", Ложь);
		ВидимостьКоманды = ФункциональныеОпцииКомандыПечати.Количество() = 0;
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпцииКомандыПечати Цикл
			Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
				ВидимостьКоманды = ВидимостьКоманды Или Форма.ПолучитьФункциональнуюОпциюФормы(ФункциональнаяОпция);
			Иначе
				ВидимостьКоманды = ВидимостьКоманды Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
			КонецЕсли;
			
			Если ВидимостьКоманды Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОписаниеКомандыПечати.СкрытаФункциональнымиОпциями = Не ВидимостьКоманды;
	КонецЦикла;
КонецПроцедуры


// Определяет принадлежность объекта метаданных к ссылочному типу.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект ссылочного типа.
//
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
	
	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Позиция = СтрНайти(ИмяОбъектаМетаданных, ".");
	Если Позиция > 0 Тогда 
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа = "Справочник"
			Или ИмяБазовогоТипа = "Документ"
			Или ИмяБазовогоТипа = "БизнесПроцесс"
			Или ИмяБазовогоТипа = "Задача"
			Или ИмяБазовогоТипа = "ПланСчетов"
			Или ИмяБазовогоТипа = "ПланОбмена"
			Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
			Или ИмяБазовогоТипа = "ПланВидовРасчета";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Вычисляет контрольную сумму для произвольных данных по указанному алгоритму.
//
// Параметры:
//  Данные   - Произвольный - любое сериализуемое значение.
//  Алгоритм - ХешФункция   - алгоритм расчета контрольной суммы. По умолчанию, MD5.
// 
// Возвращаемое значение:
//  Строка - контрольная сумма строкой без пробелов (например 32 символа).
//
Функция КонтрольнаяСуммаСтрокой(Знач Данные, Знач Алгоритм = Неопределено) Экспорт
	
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	Если ТипЗнч(Данные) <> Тип("Строка") И ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Данные = ЗначениеВСтрокуXML(Данные);
	КонецЕсли;
	ХешированиеДанных.Добавить(Данные);
	
	Если ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("ДвоичныеДанные") Тогда 
		Результат = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	ИначеЕсли ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("Число") Тогда
		Результат = Формат(ХешированиеДанных.ХешСумма, "ЧГ=");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УникальныйИдентификаторКомандыПечати(КомандаПечати)
	
	Параметры = Новый Массив;
	Параметры.Добавить("Идентификатор");
	Параметры.Добавить("МенеджерПечати");
	Параметры.Добавить("Обработчик");
	Параметры.Добавить("СразуНаПринтер");
	Параметры.Добавить("ФорматСохранения");
	Параметры.Добавить("ФиксированныйКомплект");
	Параметры.Добавить("ДополнительныеПараметры");
	
	СтруктураПараметров = Новый Структура(СтрСоединить(Параметры, ","));
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, КомандаПечати);
	
	Возврат КонтрольнаяСуммаСтрокой(СтруктураПараметров);
	
КонецФункции


// Преобразует (сериализует) любое значение в XML-строку.
// Преобразованы в могут быть только те объекты, для которых в синтакс-помощнике указано, что они сериализуются.
// См. также ЗначениеИзСтрокиXML.
//
// Параметры:
//  Значение - Произвольный - значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//  Строка - XML-строка.
//
Функция ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

Функция ПодключенныеКоманды(Форма)
	
	ЗначенияСвойств = Новый Структура("ПараметрыПодключаемыхКоманд", Null);
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств, Форма);

	Результат = ЗначенияСвойств.ПараметрыПодключаемыхКоманд;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Если Результат = Null Тогда
			ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыПодключаемыхКоманд", Новый ОписаниеТипов));
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("ЕстьУсловияВидимости", Ложь);
		Результат.Вставить("ПодменюСУсловиямиВидимости", Новый Массив);
		Результат.Вставить("КомандыСПометкой", Новый Массив);
		Результат.Вставить("КорневыеПодменюИКоманды", Новый Массив);
		Результат.Вставить("ДоступностьКоманд", Истина);
		Результат.Вставить("АдресТаблицыКоманд", Неопределено);
		Результат.Вставить("ВводНаОснованииЧерезПодключаемыеКоманды");
		
		Форма.ПараметрыПодключаемыхКоманд = Результат;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КлючПараметровРазмещения(Знач ПараметрыРазмещения)
	
	ПараметрыРазмещения = СкопироватьРекурсивно(ПараметрыРазмещения);
	ГруппаФормы = ПараметрыРазмещения.КоманднаяПанель;
	Если ТипЗнч(ГруппаФормы) = Тип("ГруппаФормы") Тогда
		ПараметрыРазмещения.КоманднаяПанель = ГруппаФормы.Имя;
	КонецЕсли;
	Источники = Новый Массив;
	Если ТипЗнч(ПараметрыРазмещения.Источники) = Тип("Массив") Тогда
		Для Каждого ОбъектМетаданных Из ПараметрыРазмещения.Источники Цикл
			Источники.Добавить(ОбъектМетаданных.ПолноеИмя());
		КонецЦикла;
		ПараметрыРазмещения.Источники = Источники;
	КонецЕсли;
	
	Возврат КонтрольнаяСуммаСтрокой(ЗначениеВСтрокуXML(ПараметрыРазмещения));

КонецФункции

// Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно,
// с учетом типов дочерних элементов. При этом содержимое значений объектных типов
// (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  Источник - Структура
//           - ФиксированнаяСтруктура
//           - Соответствие
//           - ФиксированноеСоответствие
//           - Массив
//           - ФиксированныйМассив
//           - СписокЗначений - объект, который необходимо скопировать.
//  ФиксироватьДанные - Булево       - если Истина - фиксировать, если Ложь - снять фиксацию.
//                    - Неопределено - не изменять.
//
// Возвращаемое значение:
//  Структура, 
//  ФиксированнаяСтруктура,
//  Соответствие
//  ФиксированноеСоответствие
//  Массив
//  ФиксированныйМассив
//  СписокЗначений - копия объекта, переданного в параметре Источник.
//
Функция СкопироватьРекурсивно(Источник, ФиксироватьДанные = Неопределено) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ТаблицаЗначений") Тогда
		Возврат Источник.Скопировать();
	КонецЕсли;
	
	Если ТипИсточника = Тип("Структура")
		Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда
		Приемник = СкопироватьСтруктуру(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Соответствие")
		Или ТипИсточника = Тип("ФиксированноеСоответствие") Тогда
		Приемник = СкопироватьСоответствие(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Массив")
		Или ТипИсточника = Тип("ФиксированныйМассив") Тогда
		Приемник = СкопироватьМассив(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = СкопироватьСписокЗначений(Источник, ФиксироватьДанные);
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Подменю - ГруппаФормы 
//   * ВыведеноКоманд - Число
//   * ЕстьКомандыСУсловиямиВидимости - Булево
//   * ЕстьКомандыБезУсловийВидимости - Булево
//   * Группы - Структура:
//    ** Обычное - ГруппаФормы
//    ** Важное - ГруппаФормы
//    ** СмТакже - ГруппаФормы
//   * ГруппаПоУмолчанию - ГруппаФормы
//   * ПоследняяКоманда - КомандаФормы
//   * КомандыСУсловиямиВидимости - Массив
//
Функция СведенияОВсехПодменю()
	
	СведенияОВсехПодменю = Новый ТаблицаЗначений;
	СведенияОВсехПодменю.Колонки.Добавить("Подменю");
	СведенияОВсехПодменю.Колонки.Добавить("ВыведеноКоманд", Новый ОписаниеТипов("Число"));
	СведенияОВсехПодменю.Колонки.Добавить("ЕстьКомандыСУсловиямиВидимости", Новый ОписаниеТипов("Булево"));
	СведенияОВсехПодменю.Колонки.Добавить("ЕстьКомандыБезУсловийВидимости", Новый ОписаниеТипов("Булево"));
	СведенияОВсехПодменю.Колонки.Добавить("Группы", Новый ОписаниеТипов("Структура"));
	СведенияОВсехПодменю.Колонки.Добавить("ГруппаПоУмолчанию");
	СведенияОВсехПодменю.Колонки.Добавить("ПоследняяКоманда");
	СведенияОВсехПодменю.Колонки.Добавить("КомандыСУсловиямиВидимости", Новый ОписаниеТипов("Массив"));
	
	Возврат СведенияОВсехПодменю;
	
КонецФункции

Функция ВидыКоманд()
	Виды = Новый ТаблицаЗначений;
	Виды.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Виды.Колонки.Добавить("ИмяПодменю", Новый ОписаниеТипов("Строка"));
	Виды.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	Виды.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Виды.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Виды.Колонки.Добавить("Отображение", Новый ОписаниеТипов("ОтображениеКнопки"));
	Виды.Колонки.Добавить("ВидГруппыФормы");
	
	ПриОпределенииВидовПодключаемыхКоманд(Виды);
	ПриОпределенииВидовПодключаемыхКомандСозданиеНаОсновании(Виды);
	ПриОпределенииВидовПодключаемыхКомандПечать(Виды);
	
	
	Для Каждого Вид Из Виды Цикл
		Если Не ЗначениеЗаполнено(Вид.ИмяПодменю) Тогда
			Вид.ИмяПодменю = "Подменю" + Вид.Имя;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вид.Заголовок) Тогда
			Вид.Заголовок = Вид.Имя;
		КонецЕсли;
	КонецЦикла;
	
	// Вид с пустой группой для команд, которые следует размещать в командной панели.
	Вид = Виды.Добавить();
	Вид.Имя = "КоманднаяПанель";
	Вид.ИмяПодменю = "";
	Вид.Порядок    = 90;
	
	Виды.Сортировать("Порядок Возр");
	
	Возврат Виды;
КонецФункции

Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "ЗаполнениеОбъектов";
	Вид.ИмяПодменю  = "ПодменюЗаполнить";
	Вид.Заголовок   = НСтр("ru = 'Заполнить'");
	Вид.Порядок     = 60;
	Вид.Картинка    = БиблиотекаКартинок.ЗаполнитьФорму;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
КонецПроцедуры  

Процедура ПриОпределенииВидовПодключаемыхКомандСозданиеНаОсновании(ВидыПодключаемыхКоманд) Экспорт
	
	Если Не НастройкиПодсистемы().ИспользоватьКомандыВводаНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "СозданиеНаОсновании";
	Вид.ИмяПодменю  = "ПодменюСоздатьНаОсновании";
	Вид.Заголовок   = НСтр("ru = 'Создать на основании'");
	Вид.Порядок     = 60;
	Вид.Картинка    = БиблиотекаКартинок.ВводНаОсновании;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	
КонецПроцедуры

 Функция НастройкиПодсистемы()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИспользоватьКомандыВводаНаОсновании", Истина);
	
	//СозданиеНаОснованииПереопределяемый.ПриОпределенииНастроек(Настройки);
	
	Возврат Настройки;
	
КонецФункции  

Процедура ПриОпределенииВидовПодключаемыхКомандПечать(ВидыПодключаемыхКоманд) Экспорт
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "Печать";
	Вид.ИмяПодменю  = "ПодменюПечать";
	Вид.Заголовок   = НСтр("ru = 'Печать'");
	Вид.Порядок     = 40;
	Вид.Картинка    = БиблиотекаКартинок.Печать;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
КонецПроцедуры

#Область Извлеч4 
  Процедура ПриОпределенииВидовПодключаемыхКомандСлужебные(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "ОбновлениеВерсииИБ";
	Вид.Заголовок   = НСтр("ru = 'Разблокировка объекта'");
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
КонецПроцедуры

#КонецОбласти

 Процедура ПроверитьИмяВидаКоманд(ИмяВида)
	Структура = Новый Структура;
	Попытка
		Структура.Вставить(ИмяВида, Неопределено);
	Исключение
		ТекстОшибки = НСтр("ru = 'Имя вида команд ""%1"" не удовлетворяет требованиям именования переменных.'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяВида);
	КонецПопытки;
КонецПроцедуры

Функция ЗарегистрироватьПодменю(Элементы, СведенияОВсехПодменю, ИмяПодменю, ШаблонНового = Неопределено, КоманднаяПанель = Неопределено, ПодменюПоУмолчанию = Неопределено)
	ВыведеноКоманд = 0;
	Группы = Новый Структура;
	Если ЗначениеЗаполнено(ИмяПодменю) Тогда
		Подменю = Элементы.Найти(ИмяПодменю);
		Если Подменю = Неопределено Тогда
			Если ШаблонНового = Неопределено Тогда
				Возврат ПодменюПоУмолчанию;
			КонецЕсли;
			Подменю = Элементы.Добавить(ИмяПодменю, Тип("ГруппаФормы"), КоманднаяПанель);
			Подменю.Вид         = ?(ЗначениеЗаполнено(ШаблонНового.ВидГруппыФормы), ШаблонНового.ВидГруппыФормы, ВидГруппыФормы.Подменю);
			Подменю.Заголовок   = ШаблонНового.Заголовок;
			Если Подменю.Вид = ВидГруппыФормы.Подменю Тогда
				Подменю.Картинка    = ШаблонНового.Картинка;
				Подменю.Отображение = ШаблонНового.Отображение;
			КонецЕсли;
		Иначе
			ГруппаПоУмолчанию = Подменю;
			ВыведеноКоманд = КоличествоКомандВГруппе(ГруппаПоУмолчанию);
			Для Каждого Группа Из Подменю.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(Группа) <> Тип("ГруппаФормы") Тогда
					Продолжить;
				КонецЕсли;
				КраткоеИмя = Группа.Имя;
				Если СтрНачинаетсяС(НРег(КраткоеИмя), НРег(ИмяПодменю)) Тогда
					КраткоеИмя = Сред(КраткоеИмя, СтрДлина(ИмяПодменю) + 1);
					Если НРег(КраткоеИмя) = НРег("Обычное") Тогда
						ГруппаПоУмолчанию = Группа;
					КонецЕсли;
				КонецЕсли;
				Группы.Вставить(КраткоеИмя, Группа);
			КонецЦикла;
		КонецЕсли;
		
		Если Подменю.Отображение = ОтображениеКнопки.Картинка И Не ЗначениеЗаполнено(Подменю.Подсказка) Тогда
			Подменю.Подсказка = Подменю.Заголовок;
		КонецЕсли;
		
		Если Не Группы.Свойство("Важное") Тогда
			ГруппаВажное = Элементы.Добавить(ИмяПодменю + "Важное", Тип("ГруппаФормы"), Подменю);
			ГруппаВажное.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаВажное.Заголовок = Подменю.Заголовок + " (" + НСтр("ru = 'Важное'") + ")";
			Группы.Вставить("Важное", ГруппаВажное);
		КонецЕсли;
		Если Не Группы.Свойство("Обычное") Тогда
			ГруппаПоУмолчанию = Элементы.Добавить(ИмяПодменю + "Обычное", Тип("ГруппаФормы"), Подменю);
			ГруппаПоУмолчанию.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаПоУмолчанию.Заголовок = Подменю.Заголовок + " (" + НСтр("ru = 'Обычное'") + ")";
			Группы.Вставить("Обычное", ГруппаПоУмолчанию);
		КонецЕсли;
		Если Не Группы.Свойство("СмТакже") Тогда
			ГруппаСмТакже = Элементы.Добавить(ИмяПодменю + "СмТакже", Тип("ГруппаФормы"), Подменю);
			ГруппаСмТакже.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаСмТакже.Заголовок = Подменю.Заголовок + " (" + НСтр("ru = 'См. также'") + ")";
			Группы.Вставить("СмТакже", ГруппаСмТакже);
		КонецЕсли;
		
	Иначе
		Если ШаблонНового = Неопределено Тогда
			Возврат ПодменюПоУмолчанию;
		КонецЕсли;
		Подменю = КоманднаяПанель;
		ГруппаПоУмолчанию = КоманднаяПанель;
	КонецЕсли;
	
	Результат = СведенияОВсехПодменю.Добавить();
	Результат.Подменю = Подменю;
	Результат.ГруппаПоУмолчанию = ГруппаПоУмолчанию;
	Результат.Группы = Группы;
	Результат.ВыведеноКоманд = ВыведеноКоманд;
	Возврат Результат;
КонецФункции

Функция ОпределитьИмяКоманды(Форма, ИмяГруппы, ИдентификаторКоманды, СчетчикКомандСАвтогенерируемымИменем)
	Если ИмяСоответствуетТребованиямИменованияСвойств(ИдентификаторКоманды) Тогда
		ИмяКоманды = ИмяГруппы + "_" + ИдентификаторКоманды;
	Иначе
		СчетчикКомандСАвтогенерируемымИменем = СчетчикКомандСАвтогенерируемымИменем + 1;
		ИмяКоманды = ИмяГруппы + "_" + Формат(СчетчикКомандСАвтогенерируемымИменем, "ЧН=; ЧГ=");
	КонецЕсли;
	Пока Форма.Элементы.Найти(ИмяКоманды) <> Неопределено
		Или Форма.Команды.Найти(ИмяКоманды) <> Неопределено Цикл
		СчетчикКомандСАвтогенерируемымИменем = СчетчикКомандСАвтогенерируемымИменем + 1;
		ИмяКоманды = ИмяГруппы + "_" + Формат(СчетчикКомандСАвтогенерируемымИменем, "ЧН=; ЧГ=");
	КонецЦикла;
	Возврат ИмяКоманды;
КонецФункции

Функция ИмяСоответствуетТребованиямИменованияСвойств(Имя)
	Буквы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	Цифры = "1234567890";
	
	Если Имя = "" Или СтрНайти(Буквы + "_", ВРег(Лев(Имя, 1))) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрРазделить(ВРег(Имя), Буквы + Цифры + "_", Ложь).Количество() = 0;
КонецФункции   

Процедура ПриВыводеКоманд(Форма, ВидКоманд, СведенияОПодменюПоУмолчанию, ПараметрыРазмещения) Экспорт
	
	Если ВидКоманд.Имя <> "СозданиеНаОсновании" Тогда
		Возврат;
	КонецЕсли;
		
	Если ПараметрыРазмещения.ВводНаОснованииЧерезПодключаемыеКоманды Тогда
		СкрытьСтандартноеПодменюВводаНаОсновании(Форма, СведенияОПодменюПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьСтандартноеПодменюВводаНаОсновании(Форма, ДинамическоеПодменюСозданияНаОсновании)
	
	ПодменюСоздатьНаОсновании = Форма.Элементы.Найти("ФормаСоздатьНаОсновании");
	Если ПодменюСоздатьНаОсновании = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодменюСоздатьНаОсновании.Видимость = Ложь;
	
	ИменаАвтогенерируемыхКоманд = Новый Соответствие;
	Для Каждого Элемент Из ОбъектыСКомандамиСозданияНаОсновании() Цикл
		ИменаАвтогенерируемыхКоманд.Вставить("Форма" + СтрЗаменить(Элемент.Ключ, ".", "") + "СоздатьНаОсновании", Истина);
	КонецЦикла;
	
	ПеремещаемыеЭлементы = Новый Массив;
	
	Для Каждого Элемент Из ПодменюСоздатьНаОсновании.ПодчиненныеЭлементы Цикл
		Если ИменаАвтогенерируемыхКоманд[Элемент.Имя] = Неопределено Тогда
			ПеремещаемыеЭлементы.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из ПеремещаемыеЭлементы Цикл
		Форма.Элементы.Переместить(Элемент, ДинамическоеПодменюСозданияНаОсновании.Группы.Обычное);
		ДинамическоеПодменюСозданияНаОсновании.ВыведеноКоманд = ДинамическоеПодменюСозданияНаОсновании.ВыведеноКоманд + 1;
	КонецЦикла;
	
КонецПроцедуры
// Список объектов, в которых используются команды создания на основании.
//
// Возвращаемое значение:
//   Массив из Строка - имена объектов метаданных, подключенных к подсистеме.
Функция ОбъектыСКомандамиСозданияНаОсновании() Экспорт
	
	Объекты = Новый Массив;
	//ИнтеграцияПодсистемБСП.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты);
	//СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты);
	
	Результат = Новый Соответствие;
	Для Каждого ОбъектМетаданных Из Объекты Цикл
		Результат.Вставить(ОбъектМетаданных.ПолноеИмя(), Истина);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

Функция КоманднаяПанельФормы(Форма, ПрефиксГрупп, ЭтоФормаОбъекта)
	
	Элементы = Форма.Элементы;
	
	Результат = Элементы.Найти(ПрефиксГрупп + "ПодключаемыеКоманды");
	Если Результат = Неопределено Тогда
		Результат = Элементы.Найти(ПрефиксГрупп + "КоманднаяПанель");
		
		Если Результат = Неопределено Тогда
			Результат = Элементы.Найти(ПрефиксГрупп + "ОсновнаяКоманднаяПанель");
			
			Если Результат = Неопределено И ЗначениеЗаполнено(ПрефиксГрупп) Тогда
				ТаблицаФормы = Элементы.Найти(ПрефиксГрупп);
				Если ТипЗнч(ТаблицаФормы) = Тип("ТаблицаФормы") Тогда
					Результат = ТаблицаФормы.КоманднаяПанель;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЭтоФормаОбъекта
				И Результат = Неопределено
				И Не ЗначениеЗаполнено(ПрефиксГрупп) Тогда
				ТаблицаФормы = Элементы.Найти("Список");
				Если ТипЗнч(ТаблицаФормы) = Тип("ТаблицаФормы")
					И ТаблицаФормы.ПоложениеКоманднойПанели <> ПоложениеКоманднойПанелиЭлементаФормы.Нет Тогда
					Результат = ТаблицаФормы.КоманднаяПанель;
				КонецЕсли;
			КонецЕсли;
			
			Если Результат = Неопределено Тогда
				Результат = Форма.КоманднаяПанель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЭтоПутьДоРеквизита(Знач ПутьДоРеквизита)
	ПутьДоРеквизита = ВРег(ПутьДоРеквизита);
	ПутьДоРеквизита = СтрЗаменить(ПутьДоРеквизита, "НЕ ", "");
	Идентификаторы = СтрРазделить(СтрЗаменить(ПутьДоРеквизита, "%ИСТОЧНИК%",""), ".");
	Для Каждого Элемент Из Идентификаторы Цикл
		Если Не ИмяСоответствуетТребованиямИменованияСвойств(Элемент) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ВыражениеВычислениеПометки(Знач ВыражениеПометки)
	Результат = "";
	
	ВыражениеПометки = ВРег(ВыражениеПометки);
	ПутьДоРеквизита = СтрЗаменить(ВыражениеПометки, "НЕ ", "");
	Если СтрНачинаетсяС(ВыражениеПометки, "НЕ ") Тогда
		Результат = "НЕ "	
	КонецЕсли;
	ЧастиПутиЗначениеПометки = СтрРазделить(ПутьДоРеквизита, ".");
	Для Сч = 0 По ЧастиПутиЗначениеПометки.Количество() - 1 Цикл
		ЧастиПутиЗначениеПометки[Сч] = "["""+ЧастиПутиЗначениеПометки[Сч]+"""]";			
	КонецЦикла;
	Результат = Результат + "Форма"+СтрСоединить(ЧастиПутиЗначениеПометки, "");
	
	Возврат Результат;
КонецФункции

Функция ОписаниеКомандыНаКлиенте(Команда, КнопкаФормы)
	ОписаниеКоманды = Новый Структура;
	ОписаниеКоманды.Вставить("ИмяВФорме", КнопкаФормы.Имя);
	ОписаниеКоманды.Вставить("Вид", Команда.Вид);
	ОписаниеКоманды.Вставить("Идентификатор", Команда.Идентификатор);
	ОписаниеКоманды.Вставить("ЗначениеПометки", Команда.ЗначениеПометки);
	Возврат ОписаниеКоманды;
КонецФункции

Функция КраткиеСведенияОПодменю(СведенияОПодменю)
	КраткиеСведенияОПодменю = Новый Структура("Имя, КомандыСУсловиямиВидимости, ЕстьКомандыБезУсловийВидимости");
	ЗаполнитьЗначенияСвойств(КраткиеСведенияОПодменю, СведенияОПодменю);
	Возврат КраткиеСведенияОПодменю;
КонецФункции

Функция СкопироватьСтруктуру(СтруктураИсточник, ФиксироватьДанные)
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СтруктураИсточник) = Тип("ФиксированнаяСтруктура") Тогда 
		
		Возврат Новый ФиксированнаяСтруктура(СтруктураРезультат);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция СкопироватьСоответствие(СоответствиеИсточник, ФиксироватьДанные)
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СоответствиеИсточник) = Тип("ФиксированноеСоответствие") Тогда 
		Возврат Новый ФиксированноеСоответствие(СоответствиеРезультат);
	КонецЕсли;
	
	Возврат СоответствиеРезультат;
	
КонецФункции

Функция СкопироватьМассив(МассивИсточник, ФиксироватьДанные)
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(СкопироватьРекурсивно(Элемент, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(МассивИсточник) = Тип("ФиксированныйМассив") Тогда 
		Возврат Новый ФиксированныйМассив(МассивРезультат);
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция СкопироватьСписокЗначений(СписокИсточник, ФиксироватьДанные)
	
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокРезультат.Добавить(
			СкопироватьРекурсивно(ЭлементСписка.Значение, ФиксироватьДанные), 
			ЭлементСписка.Представление, 
			ЭлементСписка.Пометка, 
			ЭлементСписка.Картинка);
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции

Функция КоличествоКомандВГруппе(Группа)
	Результат = 0;
	Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Результат = Результат + КоличествоКомандВГруппе(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных, ВызыватьИсключение = Истина) Экспорт
	ТипОписанияОбъектаМетаданных = ТипЗнч(ОписаниеОбъектаМетаданных);
	Если ТипОписанияОбъектаМетаданных = Тип("Строка") Тогда
		ПолноеИмяОбъектаМетаданных = ОписаниеОбъектаМетаданных;	
	ИначеЕсли ТипОписанияОбъектаМетаданных = Тип("ОбъектМетаданных") Тогда
		ПолноеИмяОбъектаМетаданных = ОписаниеОбъектаМетаданных.ПолноеИмя();
	КонецЕсли;

	//Массив = Новый Массив;
	//Массив.Добавить(ПолноеИмяОбъектаМетаданных);
	
	Идентификаторы = ИдентификаторыОбъектовМетаданных(ПолноеИмяОбъектаМетаданных);
	
	Идентификатор = Идентификаторы.Получить(ПолноеИмяОбъектаМетаданных);
	Если Идентификатор = Неопределено Тогда
		Возврат Null;
	КонецЕсли;
	
	Возврат Идентификатор;   

		
КонецФункции

Функция ИдентификаторыОбъектовМетаданных(ОписаниеОбъектовМетаданных) 
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторыПоПолнымИменам = ОбъектМетаданныхПоПолномуИмени(ОписаниеОбъектовМетаданных);
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Результат = Новый Соответствие;
	//ПолныеИменаБезКэша = Новый Массив;
	
	Если ИдентификаторыПоПолнымИменам <> Неопределено Тогда
		Результат.Вставить(ОписаниеОбъектовМетаданных, ИдентификаторыПоПолнымИменам);
	КонецЕсли;

	Возврат Результат;	
		
КонецФункции

// Возвращает ОбъектМетаданных, быстро найденный по полному имени.
// Более производительный аналог метода платформы Метаданные.НайтиПоПолномуИмени
// для корневых объектов метаданных.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных, например, Справочник.Организации
//
// Возвращаемое значение:
//  ОбъектМетаданных - когда найден
//  Неопределено - когда не найден
//
Функция ОбъектМетаданныхПоПолномуИмени(ПолноеИмя) Экспорт
	
	ПозицияТочки = СтрНайти(ПолноеИмя, ".");
	ИмяБазовогоТипа = Лев(ПолноеИмя, ПозицияТочки - 1);
	
	ИменаКоллекций = ИменаКоллекцийПоИменамБазовыхТипов();
	Коллекция = ИменаКоллекций.Получить(ВРег(ИмяБазовогоТипа));
	
	Если Коллекция <> Неопределено Тогда
		Если Коллекция <> "Подсистемы" Тогда
			ИмяОбъекта = Сред(ПолноеИмя, ПозицияТочки + 1);
			ОбъектМетаданных = Метаданные[Коллекция].Найти(ИмяОбъекта);
		Иначе
			ИменаПодсистем = СтрРазделить(ВРег(ПолноеИмя), ".");
			Количество = ИменаПодсистем.Количество();
			Подсистема = Метаданные;
			ОбъектМетаданных = Неопределено;
			Индекс = 0;
			Пока Истина Цикл
				Индекс = Индекс + 1;
				Если Индекс >= Количество Тогда
					Прервать;
				КонецЕсли;
				ИмяПодсистемы = ИменаПодсистем[Индекс];
				Подсистема = Подсистема.Подсистемы.Найти(ИмяПодсистемы);
				Если Подсистема = Неопределено Тогда
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
				Если Индекс = Количество Тогда
					ОбъектМетаданных = Подсистема;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции     

Функция ИменаКоллекцийПоИменамБазовыхТипов() Экспорт
	
	ИменаКоллекций = Новый Соответствие;
	ИменаКоллекций.Вставить(ВРег("Подсистема"), "Подсистемы");
	ИменаКоллекций.Вставить(ВРег("ОбщийМодуль"), "ОбщиеМодули");
	ИменаКоллекций.Вставить(ВРег("ПараметрСеанса"), "ПараметрыСеанса");
	ИменаКоллекций.Вставить(ВРег("Роль"), "Роли");
	ИменаКоллекций.Вставить(ВРег("ОбщийРеквизит"), "ОбщиеРеквизиты");
	ИменаКоллекций.Вставить(ВРег("ПланОбмена"), "ПланыОбмена");
	ИменаКоллекций.Вставить(ВРег("КритерийОтбора"), "КритерииОтбора");
	ИменаКоллекций.Вставить(ВРег("ПодпискаНаСобытие"), "ПодпискиНаСобытия");
	ИменаКоллекций.Вставить(ВРег("РегламентноеЗадание"), "РегламентныеЗадания");
	ИменаКоллекций.Вставить(ВРег("ФункциональнаяОпция"), "ФункциональныеОпции");
	ИменаКоллекций.Вставить(ВРег("ПараметрФункциональныхОпций"), "ПараметрыФункциональныхОпций");
	ИменаКоллекций.Вставить(ВРег("ОпределяемыйТип"), "ОпределяемыеТипы");
	ИменаКоллекций.Вставить(ВРег("ХранилищеНастроек"), "ХранилищаНастроек");
	ИменаКоллекций.Вставить(ВРег("ОбщаяФорма"), "ОбщиеФормы");
	ИменаКоллекций.Вставить(ВРег("ОбщаяКоманда"), "ОбщиеКоманды");
	ИменаКоллекций.Вставить(ВРег("ГруппаКоманд"), "ГруппыКоманд");
	ИменаКоллекций.Вставить(ВРег("ОбщийМакет"), "ОбщиеМакеты");
	ИменаКоллекций.Вставить(ВРег("ОбщаяКартинка"), "ОбщиеКартинки");
	ИменаКоллекций.Вставить(ВРег("ПакетXDTO"), "ПакетыXDTO");
	ИменаКоллекций.Вставить(ВРег("WebСервис"), "WebСервисы");
	ИменаКоллекций.Вставить(ВРег("HTTPСервис"), "HTTPСервисы");
	ИменаКоллекций.Вставить(ВРег("WSСсылка"), "WSСсылки");
	ИменаКоллекций.Вставить(ВРег("СервисИнтеграции"), "СервисыИнтеграции");
	ИменаКоллекций.Вставить(ВРег("ЭлементСтиля"), "ЭлементыСтиля");
	ИменаКоллекций.Вставить(ВРег("Стиль"), "Стили");
	ИменаКоллекций.Вставить(ВРег("Язык"), "Языки");
	ИменаКоллекций.Вставить(ВРег("Константа"), "Константы");
	ИменаКоллекций.Вставить(ВРег("Справочник"), "Справочники");
	ИменаКоллекций.Вставить(ВРег("Документ"), "Документы");
	ИменаКоллекций.Вставить(ВРег("Последовательность"), "Последовательности");
	ИменаКоллекций.Вставить(ВРег("ЖурналДокументов"), "ЖурналыДокументов");
	ИменаКоллекций.Вставить(ВРег("Перечисление"), "Перечисления");
	ИменаКоллекций.Вставить(ВРег("Отчет"), "Отчеты");
	ИменаКоллекций.Вставить(ВРег("Обработка"), "Обработки");
	ИменаКоллекций.Вставить(ВРег("ПланВидовХарактеристик"), "ПланыВидовХарактеристик");
	ИменаКоллекций.Вставить(ВРег("ПланСчетов"), "ПланыСчетов");
	ИменаКоллекций.Вставить(ВРег("ПланВидовРасчета"), "ПланыВидовРасчета");
	ИменаКоллекций.Вставить(ВРег("РегистрСведений"), "РегистрыСведений");
	ИменаКоллекций.Вставить(ВРег("РегистрНакопления"), "РегистрыНакопления");
	ИменаКоллекций.Вставить(ВРег("РегистрБухгалтерии"), "РегистрыБухгалтерии");
	ИменаКоллекций.Вставить(ВРег("РегистрРасчета"), "РегистрыРасчета");
	ИменаКоллекций.Вставить(ВРег("БизнесПроцесс"), "БизнесПроцессы");
	ИменаКоллекций.Вставить(ВРег("Задача"), "Задачи");
	ИменаКоллекций.Вставить(ВРег("ВнешниеИсточникиДанных"), "ВнешнийИсточникДанных");
	
	Возврат Новый ФиксированноеСоответствие(ИменаКоллекций);
	
КонецФункции

//--------------------------------

 // Возвращает описание команды по имени элемента формы.
Функция ОписаниеКоманды(ИмяКомандыВФорме, АдресНастроек) Экспорт
	Команды = ПолучитьИзВременногоХранилища(АдресНастроек);
	Команда = Команды.Найти(ИмяКомандыВФорме, "ИмяВФорме");
	Если Команда = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сведения о команде ""%1"" не найдены.'"),
			ИмяКомандыВФорме);
	КонецЕсли;
	ОписаниеКоманды = ОбщееНазначение.СтрокаТаблицыЗначенийВСтруктуру(Команда);
	
	Если ЗначениеЗаполнено(ОписаниеКоманды.ИмяФормы) Тогда
		ОписаниеКоманды.Вставить("Серверная", Ложь);
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеКоманды.ИмяФормы, ".", Истина, Истина);
		КоличествоПодстрок = МассивПодстрок.Количество();
		Если КоличествоПодстрок = 1
			Или (КоличествоПодстрок = 2 И ВРег(МассивПодстрок[0]) <> "ОБЩАЯФОРМА") Тогда
			ОписаниеКоманды.ИмяФормы = ОписаниеКоманды.Менеджер + "." + ОписаниеКоманды.ИмяФормы;
		КонецЕсли;
	Иначе
		ОписаниеКоманды.Вставить("Серверная", Истина);
		Если ЗначениеЗаполнено(ОписаниеКоманды.Обработчик) Тогда
			Если Не ПустаяСтрока(ОписаниеКоманды.Менеджер) И СтрНайти(ОписаниеКоманды.Обработчик, ".") = 0 Тогда
				ОписаниеКоманды.Обработчик = ОписаниеКоманды.Менеджер + "." + ОписаниеКоманды.Обработчик;
			КонецЕсли;
			Если СтрНачинаетсяС(ВРег(ОписаниеКоманды.Обработчик), ВРег("ОбщийМодуль.")) Тогда
				ПозицияТочки = СтрНайти(ОписаниеКоманды.Обработчик, ".");
				ОписаниеКоманды.Обработчик = Сред(ОписаниеКоманды.Обработчик, ПозицияТочки + 1);
			КонецЕсли;
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеКоманды.Обработчик, ".", Истина, Истина);
			КоличествоПодстрок = МассивПодстрок.Количество();
			Если КоличествоПодстрок = 2 Тогда
				ИмяМодуля = МассивПодстрок[0];
				ОбъектМетаданныхОбщийМодуль = Метаданные.ОбщиеМодули.Найти(ИмяМодуля);
				Если ОбъектМетаданныхОбщийМодуль = Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Общий модуль ""%1"" не найден.'"),
						ИмяМодуля);
				КонецЕсли;
				Если ОбъектМетаданныхОбщийМодуль.КлиентУправляемоеПриложение Тогда
					ОписаниеКоманды.Серверная = Ложь;
				КонецЕсли;
			Иначе
				Вид = ВРег(МассивПодстрок[0]);
				ВидВоМножественномЧисле = ВидОбъектаМетаданныхВоМножественномЧисле(Вид);
				Если ВидВоМножественномЧисле <> Неопределено Тогда
					МассивПодстрок.Установить(0, ВидВоМножественномЧисле);
					ОписаниеКоманды.Обработчик = СтрСоединить(МассивПодстрок, ".");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОписаниеКоманды.Удалить("Менеджер");
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеКоманды);
КонецФункции   

// Возвращает вид объекта во множественном числе.
Функция ВидОбъектаМетаданныхВоМножественномЧисле(Знач Вид)
	Вид = ВРег(СокрЛП(Вид));
	Если Вид = "ПЛАНОБМЕНА" Тогда
		Возврат "ПланыОбмена";
	ИначеЕсли Вид = "СПРАВОЧНИК" Тогда
		Возврат "Справочники";
	ИначеЕсли Вид = "ДОКУМЕНТ" Тогда
		Возврат "Документы";
	ИначеЕсли Вид = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Возврат "ЖурналыДокументов";
	ИначеЕсли Вид = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Возврат "Перечисления";
	ИначеЕсли Вид = "ОТЧЕТ" Тогда
		Возврат "Отчеты";
	ИначеЕсли Вид = "ОБРАБОТКА" Тогда
		Возврат "Обработки";
	ИначеЕсли Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Возврат "ПланыВидовХарактеристик";
	ИначеЕсли Вид = "ПЛАНСЧЕТОВ" Тогда
		Возврат "ПланыСчетов";
	ИначеЕсли Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Возврат "ПланыВидовРасчета";
	ИначеЕсли Вид = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Возврат "РегистрыСведений";
	ИначеЕсли Вид = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Возврат "РегистрыНакопления";
	ИначеЕсли Вид = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Возврат "РегистрыБухгалтерии";
	ИначеЕсли Вид = "РЕГИСТРРАСЧЕТА" Тогда
		Возврат "РегистрыРасчета";
	ИначеЕсли Вид = "ПЕРЕРАСЧЕТ" Тогда
		Возврат "Перерасчеты";
	ИначеЕсли Вид = "БИЗНЕСПРОЦЕСС" Тогда
		Возврат "БизнесПроцессы";
	ИначеЕсли Вид = "ЗАДАЧА" Тогда
		Возврат "Задачи";
	ИначеЕсли Вид = "КОНСТАНТА" Тогда
		Возврат "Константы";
	ИначеЕсли Вид = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Возврат "Последовательности";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


